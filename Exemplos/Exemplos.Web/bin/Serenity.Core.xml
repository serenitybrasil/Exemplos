<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Serenity.Core</name>
    </assembly>
    <members>
        <member name="T:Serenity.Web.ImpersonatingAuthorizationService">
            <summary>
            Adds impersonation support to any IAuthorizationService implementation
            </summary>
        </member>
        <member name="T:Serenity.Web.LogicOperatorPermissionService">
            <summary>
            Adds AND OR operator support to any IPermissionService implementation
            </summary>
            <remarks>
            Register this class in your application start, to allow | &amp; operators
            in your permission services, e.g.
            <code>
            registrar.RegisterInstance&lt;IPermissionService&gt;(new LogicOperatorPermissionService(new MyPermissionService()))
            </code>
            </remarks>
        </member>
        <member name="T:Serenity.Web.TransientGrantingPermissionService">
            <summary>
            Adds temporary granting support to any IPermissionService implementation
            </summary>
            <remarks>
            Register this class in your application start, to allow granting permissions temporarily.
            <code>
            registrar.RegisterInstance&lt;IPermissionService&gt;(new TransientGrantingPermissionService(new MyPermissionService()))
            </code>
            </remarks> 
        </member>
        <member name="M:Serenity.Web.TransientGrantingPermissionService.Grant(System.String[])">
            <summary>
            Grants specified permissions temporarily (or makes it look like)
            </summary>
            <param name="permissions">List of permission keys</param>
        </member>
        <member name="M:Serenity.Web.TransientGrantingPermissionService.GrantAll">
            <summary>
            Grants all permissions temporarily (or makes it look like)
            </summary>
        </member>
        <member name="M:Serenity.Web.TransientGrantingPermissionService.UndoGrant">
            <summary>
            Undoes last grant or grant all operation
            </summary>
        </member>
        <member name="T:Serenity.Web.ImageScaleMode">
            <summary>
              Thumbnail scaling modes</summary>
        </member>
        <member name="F:Serenity.Web.ImageScaleMode.StretchToFit">
            <summary>
              In this mode, thumbnail is generated just at the size requested.
              If thumbnail width or height specified only, than thumbnail will have same aspect ratio,
              otherwise if thumbnail and source is not at same ratio, thumbnail will have a 
              narrowed or widened look.</summary>
        </member>
        <member name="F:Serenity.Web.ImageScaleMode.PreserveRatioNoFill">
            <summary>
              Try to keep original aspect ratio of source image while generating the thumbnail.
              If only width or height is set, it works same way with StretchToFit.
              When both set, thumbnail width or height will be decreased suitably.</summary>
        </member>
        <member name="F:Serenity.Web.ImageScaleMode.PreserveRatioWithFill">
            <summary>
              It is logically same with PreserveRatioNoFill but this time instead of decreasing
              thumbnail width or height, empty parts are filled.</summary>
        </member>
        <member name="F:Serenity.Web.ImageScaleMode.CropSourceImage">
            <summary>
              In this mode only central part of source image (horizontally or vertically) is taken to keep 
              thumbnail at requested size if aspect ratio of source image is different.</summary>
        </member>
        <member name="T:Serenity.Abstractions.IRequestContext">
            <summary>
            Interface for abstraction that should return HttpContext.Current.Items for web requests,
            and null for normal threads.
            </summary>
        </member>
        <member name="P:Serenity.Abstractions.IRequestContext.Items">
            <summary>
            A dictionary that can be used as a request context specific storage
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.ITransientGrantor">
            <summary>
            Interface for permission services that supports granting permissions temporarily
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.ITransientGrantor.Grant(System.String[])">
            <summary>
            Grants specified permissions temporarily (or makes it look like)
            </summary>
            <param name="permissions">List of permission keys</param>
        </member>
        <member name="M:Serenity.Abstractions.ITransientGrantor.GrantAll">
            <summary>
            Grants all permissions temporarily (or makes it look like)
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.ITransientGrantor.UndoGrant">
            <summary>
            Undoes last grant or grant all operation
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.IImpersonator">
            <summary>
            Interface for authorization services that supports temporary impersonating
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IImpersonator.Impersonate(System.String)">
            <summary>
            Temporarily impersonates as a user
            </summary>
            <param name="username">Username to impersonate as</param>
        </member>
        <member name="M:Serenity.Abstractions.IImpersonator.UndoImpersonate">
            <summary>
            Undoes impersonation
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.IConfigurationManager">
            <summary>
            Abstraction for ConfigurationManager to remove dependency on System.Configuration
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.IPermissionService">
            <summary>
            Permission service abstraction
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IPermissionService.HasPermission(System.String)">
            <summary>
            Returns true if user has specified permission
            </summary>
            <param name="permission">The permission key (e.g. Administration)</param>
        </member>
        <member name="T:Serenity.Abstractions.IAuthenticationService">
            <summary>
            Authentication service abstraction
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IAuthenticationService.Validate(System.String@,System.String)">
            <summary>
            Returns true if username/password pair is correct
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.ILocalCache">
            <summary>
            An abstraction for local cache access (e.g. System.Web.Cache). The 'local' means 
            objects in local memory, so no serialization should be in effect.
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.ILocalCache.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds a value to cache with a given key
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiration">Expire time (Use TimeSpan.Zero to hold value with no expiration)</param>
        </member>
        <member name="M:Serenity.Abstractions.ILocalCache.Get``1(System.String)">
            <summary>
            Reads the value with specified key from the local cache.</summary>
            <typeparam name="TItem">Data type</typeparam>
            <param name="key">Key</param>
        </member>
        <member name="M:Serenity.Abstractions.ILocalCache.Remove(System.String)">
            <summary>
            Removes the value with specified key from the local cache. If the value doesn't exist, no error is raised.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Serenity.Abstractions.ILocalCache.RemoveAll">
            <summary>
            Removes all items from the cache (avoid expect unit tests).
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.IDistributedCache">
            <summary>
            An abstraction for distributed cache access. (e.g.: Redis, MemCached, Couchbase)
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IDistributedCache.Increment(System.String,System.Int32)">
            <summary>
            Increments value with specified key and returns the new value.
            If value doesn't exist, its new value will be 1.
            </summary>
            <param name="key">Key.</param>
            <param name="amount">Increase amount.</param>
            <returns>Increased amount, or 1 if it didn't exist before</returns>
        </member>
        <member name="M:Serenity.Abstractions.IDistributedCache.Get``1(System.String)">
            <summary>
            Reads the value with given key. If value didn't exist in cache, 
            return the default(T) value. 
            </summary>
            <typeparam name="TValue">Value type</typeparam>
            <param name="key">Key</param>
            <remarks>It may raise an exception if the value is not of type TValue.</remarks>
        </member>
        <member name="M:Serenity.Abstractions.IDistributedCache.Set``1(System.String,``0)">
            <summary>
            Writes the value to cache with specified key.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Serenity.Abstractions.IDistributedCache.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Writes the value to cache with specified key and
            expiration date.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="expiration">The time the cached item will be expired on.</param>
        </member>
        <member name="T:Serenity.Abstractions.IAuthorizationService">
            <summary>
            Authorization service abstraction
            </summary>
        </member>
        <member name="P:Serenity.Abstractions.IAuthorizationService.IsLoggedIn">
            <summary>
            True if there is a currenty logged user
            </summary>
        </member>
        <member name="P:Serenity.Abstractions.IAuthorizationService.Username">
            <summary>
            Return currently logged user name
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.IUserRetrieveService">
            <summary>
            User definition retrieve service abstraction
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IUserRetrieveService.ById(System.String)">
            <summary>
            Returns user definition for specified user ID or null if doesn't exist.
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IUserRetrieveService.ByUsername(System.String)">
            <summary>
            Returns user definition for specified username or null if doesn't exist.
            </summary>
        </member>
        <member name="T:Serenity.Abstractions.IConfigurationRepository">
            <summary>
            Abstraction for configuration system
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.IConfigurationRepository.Load(System.Type)">
            <summary>
            Loads configuration for the specified setting type.
            Returns an object instance, even if setting is not found.
            </summary>
            <param name="settingType">Setting type</param>
        </member>
        <member name="M:Serenity.Abstractions.IConfigurationRepository.Save(System.Type,System.Object)">
            <summary>
            Saves configuration for the specified setting type.
            </summary>
            <param name="settingType">Setting type</param>
            <param name="value">Setting value</param>
        </member>
        <member name="T:Serenity.Abstractions.ILocalTextRegistry">
            <summary>
            Abstraction for local text registry which stores translations for local text keys. 
            </summary>
        </member>
        <member name="M:Serenity.Abstractions.ILocalTextRegistry.TryGet(System.String,System.String)">
            <summary>
            Returns localized representation which corresponds to the local text key or the key itself if none 
            found in the registry.
            </summary>
            <param name="key">Local text key (e.g. Enums.Month.June)</param>
            <param name="languageID">Language identifier</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Abstractions.ILocalTextRegistry.Add(System.String,System.String,System.String)">
            <summary>
            Adds a local text entry to the registry
            </summary>
            <param name="languageID">Language ID (e.g. en-US, tr-TR)</param>
            <param name="key">Local text key</param>
            <param name="text">Translated text</param>
        </member>
        <member name="T:Serenity.Throttler">
            <summary>
            Provides throttling checks for operations. E.g. allow 10 login attempts per minute.
            </summary>
        </member>
        <member name="M:Serenity.Throttler.#ctor(System.String,System.TimeSpan,System.Int32)">
            <summary>
            Creates a new throttler
            </summary>
            <param name="key">Cache key for throttler. Include the resource name, e.g. username, you are throttling</param>
            <param name="duration">Check period</param>
            <param name="limit">How many times are allowed</param>
        </member>
        <member name="P:Serenity.Throttler.Key">
            <summary>
            Cache key
            </summary>
        </member>
        <member name="P:Serenity.Throttler.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:Serenity.Throttler.Limit">
            <summary>
            Limit
            </summary>
        </member>
        <member name="P:Serenity.Throttler.CacheKey">
            <summary>
            Full cache key
            </summary>
        </member>
        <member name="M:Serenity.Throttler.Check">
            <summary>
            Checks if over throttle limit
            </summary>
            <returns>True if under throttle limit, false otherwise</returns>
        </member>
        <member name="M:Serenity.Throttler.Reset">
            <summary>
            Resets the throttle.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.HeaderCssClassAttribute">
            <summary>
            Sets the CSS class for grid column headers. It sets headerCssClass property of SlickColumn.
            This has no effect for forms.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.HideOnUpdateAttribute">
            <summary>
            Controls whether this field is visible on edit record mode
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.HideOnUpdateAttribute.#ctor(System.Boolean)">
            <summary>
            Controls whether this field is visible on edit record mode
            </summary>
            <param name="value">True to hide field on update</param>
        </member>
        <member name="T:Serenity.ComponentModel.HideOnInsertAttribute">
            <summary>
            Controls whether this field is visible on new record mode
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.HideOnInsertAttribute.#ctor(System.Boolean)">
            <summary>
            Controls whether this field is visible on new record mode
            </summary>
            <param name="value">True to hide field on insert</param>
        </member>
        <member name="T:Serenity.ComponentModel.VisibleAttribute">
            <summary>
            Controls visibility of a column / form field.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.AlignRightAttribute">
            <summary>
            Right aligns text horizontally (usually in a grid column)
            </summary>
            <remarks>
            Used for text alignment in grids by adding `align-center` CSS class to corresponding SlickGrid column.
            Note that it has no effect on editors or forms.
            </remarks>
        </member>
        <member name="T:Serenity.ComponentModel.AlignmentAttribute">
            <summary>
            Controls horizontal alignment of text (usually in grid columns).
            </summary>
            <remarks>
            This is an abstract base class. You need to use AlignCenter or AlignRight attributes.
            </remarks>
        </member>
        <member name="T:Serenity.ComponentModel.AlignCenterAttribute">
            <summary>
            Centers text horizontally (usually in a grid column).
            </summary>
            <remarks>
            Used for text alignment in grids by adding `align-center` CSS class to corresponding SlickGrid column.
            Note that it has no effect on editors or forms.
            </remarks>
        </member>
        <member name="T:Serenity.ComponentModel.DisplayFormatAttribute">
            <summary>
            Sets the display format for a column.
            This has no effect on editors! It is only for Display, "NOT Editing". For editing, you have to change UI culture.
            <para>Display format strings are specific to column data and formatter type.</para>
            <para>If column is a Date or DateTime column, its default formatter accepts custom DateTime format strings like "dd/MM/yyyy".
            We don't suggest setting DisplayFormat for dates explicitly, use UI culture setting in Web.config unless a column has to display date/time in a different 
            order than the default.
            You may also use following standard format strings:<br/>
            - "d": "dd/MM/yyyy" where DMY order changes based on current UI culture.<br/>
            - "g": "dd/MM/yyyy HH:mm" where DMY order changes based on current UI culture.<br/>
            - "G": "dd/MM/yyyy HH:mm:ss" where DMY order changes based on current UI culture.<br/>
            - "s": "yyydd-MM-ddTHH:mm:ss" ISO sortable date time format.<br/>
            - "u": "yyydd-MM-ddTHH:mm:ss.fffZ" ISO 8601 UTC.</para>
            <para>If column is an integer, double or decimal it accepts.NET custom numeric format strings like "#,##0.00", "0.#"</para>
            </summary>
            <remarks>
            public class SomeColumns
            {
                [DisplayFormat("d")]
                public DateTime DateWithCultureDMYOrder { get; set; }
                [DisplayFormat("dd/MM/yyyy")]
                public DateTime DateWithConstantDMYOrder { get; set; }
                [DisplayFormat("g")]
                public DateTime DateTimeToMinWithCultureDMYOrder { get; set; }
                [DisplayFormat("dd/MM/yyyy HH:mm")]
                public DateTime DateTimeToMinConstantDMYOrder { get; set; }
                [DisplayFormat("G")]
                public DateTime DateTimeToSecWithCultureDMYOrder { get; set; }
                [DisplayFormat("dd/MM/yyyy HH:mm:ss")]
                public DateTime DateTimeToSecWithConstantDMYOrder { get; set; }
                [DisplayFormat("s")]
                public DateTime SortableDateTime { get; set; }
                [DisplayFormat("u")]
                public DateTime ISO8601UTC { get; set; }
                [DisplayFormat("#,##0.00")]
                public Decimal ShowTwoZerosAfterDecimalWithGrouping { get; set; }
                [DisplayFormat("0.00")]
                public Decimal ShowTwoZerosAfterDecimalNoGrouping { get; set; }
            }
            </remarks>
        </member>
        <member name="T:Serenity.ComponentModel.LookupScriptAttribute">
            <summary>
            Placed on rows / or custom lookup classes to denote
            it has a lookup script.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.LookupScriptAttribute.#ctor(System.String)">
            <summary>
            Creates a LookupScriptAttribute.
            </summary>
            <param name="key">Lookup key, usually in "Module.EntityName" format.</param>
        </member>
        <member name="M:Serenity.ComponentModel.LookupScriptAttribute.#ctor(System.Type)">
            <summary>
            Defines that this type has an external lookup script type,
            and the lookup key is available on that type. Use this overload only
            for row types that have external lookups.
            </summary>
            <param name="lookupType">Script type with LookupScript attribute of its own.</param>
        </member>
        <member name="P:Serenity.ComponentModel.LookupScriptAttribute.Key">
            <summary>
            Lookup key, usually in "Module.EntityName" format.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupScriptAttribute.Permission">
            <summary>
            Permission key required to access this lookup script.
            Use special value "?" for all logged-in users.
            Use special value "*" for anyone including not logged-in users.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupScriptAttribute.Expiration">
            <summary>
            Cache duration in seconds
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupScriptAttribute.LookupType">
            <summary>
            External lookup script type or base type that should be used for generating dynamic lookup script.
            Only meaningfull for Row types with external lookup scripts. Can be a generic type of TRow or
            a simple lookup class.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.AllowNonImage">
            <summary>
            Should non-image uploads be allowed.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.MaxSize">
            <summary>
            Maximum size in bytes of the uploaded file.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.MinSize">
            <summary>
            Minimum size in bytes of the uploaded file.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.MaxHeight">
            <summary>
            Maximum height in pixels of the uploaded image.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.MaxWidth">
            <summary>
            Maximum width in pixels of the uploaded image.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.MinHeight">
            <summary>
            Minimum height in pixels of the uploaded image.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.MinWidth">
            <summary>
            Minimum width in pixels of the uploaded image.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.ScaleWidth">
            <summary>
            What width image should be scaled to. Default value of 0 disables it.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.ScaleHeight">
            <summary>
            What height image should be scaled to. Default value of 0 disables it.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.ScaleSmaller">
            <summary>
            Should image be scaled up to requested size when its smaller
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.ScaleMode">
            <summary>
            What kind of image scaling should be used to generate image.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.ThumbSizes">
            <summary>
            List of thumbnail sizes requested. Something like
            "96x96;128x128;200x200"
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.ThumbMode">
            <summary>
            What kind of image scaling should be used to generate thumbnails.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.JsonEncodeValue">
            <summary>
            Only useful for MultipleImageUploadeEditor. Specifies
            wheter to JSON encode value. If your field is a string
            field set it to true.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.OriginalNameProperty">
            <summary>
            If you want to store original name of the file uploaded,
            set this to the name of another string field. Only used
            for single image uploads.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.DisplayFileName">
            <summary>
            If you have no original name property but use original
            name in file name with {4} format parameter, set this
            to true to force ImageUploadEditor show file name.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.CopyToHistory">
            <summary>
            Should a copy of file placed in a special history folder on upload. 
            This helps preserving old files on update.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.FilenameFormat">
            <summary>
            Format of the file name like "ProductImage/{1:00000}/{0:00000000}_{2}".
            Parameter 0 is the row identity value, 1 is identity value / 1000, 
            and 2 is a random string like 2cxs4bc. 
            You can also use the shortcut "ProductImage/~" which is equivalent 
            to the prior sample.
            If you don't specify this, it will default to something like
            Product/ProductImage/~ which is generated by combining row class name
            and field name.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.DisableDefaultBehavior">
            <summary>
            If you don't want ImageUploadBehavior to process this upload, 
            and want to handle it manually, set to true (not recommended)
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.ImageUploadEditorAttribute.SubFolder">
            <summary>
            Avoid. For compability with older versions.
            This part of filename is used as a prefix to FilenameFormat,
            but it is not stored in database.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.InsertableAttribute">
            <summary>
            Controls if this field is editable in new record mode.
            When used with fields, turns on or off the insertable flag.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.InsertableAttribute.#ctor(System.Boolean)">
            <summary>
            Controls if this field is editable in new record mode.
            When used with fields, turns on or off the insertable flag.
            </summary>
            <param name="insertable">True to make field insertable</param>
        </member>
        <member name="T:Serenity.ComponentModel.UpdatableAttribute">
            <summary>
            Controls if this field is editable in update record mode.
            When used with fields, turns on or off the updatable flag.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.UpdatableAttribute.#ctor(System.Boolean)">
            <summary>
            Controls if this field is editable in update record mode.
            When used with fields, turns on or off the updatable flag.
            </summary>
            <param name="updatable">True to make field updatable</param>
        </member>
        <member name="T:Serenity.ComponentModel.CssClassAttribute">
            <summary>
            Sets the CSS class for columns and form fields.
            In forms, class is added to container div with .field class that contains both label and editor.
            For columns, it sets cssClass property of SlickColumn, which adds this class to slick cells for all rows.
            Slick column headers are not affected by this attribute, use HeaderCssClass for that.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.LookupKey">
            <summary>
            Lookup key, e.g. Northwind.CustomerCity
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.InplaceAdd">
            <summary>
            Enable inplace add / edit functionality
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.InplaceAddPermission">
            <summary>
            Permission required to use inplace add / edit
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.DialogType">
            <summary>
            This property is meaningfull when InplaceAdd is true. By default, dialog type name
            is determined by LookupKey, e.g. if lookup key is "Northwind.CustomerCity", 
            a dialog class named "Northwind.CustomerCityDialog" is used. If dialog type is different
            than lookup key, set this to classname, e.g. "MyModule.MyDialog"
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.CascadeFrom">
            <summary>
            ID (can be relative) of the editor that this editor will cascade from, e.g. Country
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.CascadeField">
            <summary>
            Cascade filtering field (items will be filtered on this key, e.g. CountryID)
            Make sure you have [LookupInclude] attribute on this field of lookup row,
            otherwise you'll have empty results as this field won't be available client side.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.CascadeValue">
            <summary>
            Cascade filtering value, usually set by CascadeFrom editor, e.g. the integer value of CountryID
            If null or empty, and CascadeField is set, all items are filtered
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.FilterField">
            <summary>
            Optional filtering field (items will be filtered on this key, e.g. GroupID)
            Make sure you have [LookupInclude] attribute on this field of lookup row,
            otherwise you'll have empty results as this field won't be available client side.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.FilterValue">
            <summary>
            Optional filtering value, e.g. the integer value of GroupID. If null or empty string no filtering occurs.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.MinimumResultsForSearch">
            <summary>
            The minimum number of results that must be initially (after opening the dropdown for the first time) populated in order to keep the search field. 
            This is useful for cases where local data is used with just a few results, in which case the search box is not very useful and wastes screen space.
            The option can be set to a negative value to permanently hide the search field.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.Multiple">
            <summary>
            Allow multiple selection. Make sure your field is a List. 
            You may also set CommaSeparated to use a string field.
            </summary>
        </member>
        <member name="P:Serenity.ComponentModel.LookupEditorBaseAttribute.Delimited">
            <summary>
            Use comma separated string instead of an array to serialize values.
            </summary>
        </member>
        <member name="M:Serenity.ComponentModel.LookupEditorAttribute.#ctor(System.Type)">
            <summary>
            If you use this constructor, lookupKey will be determined by [LookupScript] attribute
            on specified lookup type. If this is a row type, make sure it has [LookupScript] attribute
            on it.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.IgnoreAttribute">
            <summary>
            Skips a property while generating grid column or form field list.
            Use this to ignore a property for UI, but still use it for other 
            purposes like JSON serialization.
            This might be useful when a type is used as a Service Request and Form
            Declaration at the same time.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.HintAttribute">
            <summary>
            Sets a hint for a form field. 
            Hint is shown when field label is hovered. 
            This has no effect on columns.
            </summary>
        </member>
        <member name="T:Serenity.ComponentModel.PlaceholderAttribute">
            <summary>
            Sets a placeholder for a form field. Placeholder text is shown inside the editor
            when its value is empty. Only editors using basic inputs and Select2 editor
            supports this.
            </summary>
        </member>
        <member name="T:Serenity.Reflection.ObjectAccessor">
            <summary>
            Represents an individual object, allowing access to members by-name
            </summary>
        </member>
        <member name="P:Serenity.Reflection.ObjectAccessor.Item(System.String)">
            <summary>
            Get or Set the value of a named member for the underlying object
            </summary>
        </member>
        <member name="P:Serenity.Reflection.ObjectAccessor.Target">
            <summary>
            The object represented by this instance
            </summary>
        </member>
        <member name="M:Serenity.Reflection.ObjectAccessor.Equals(System.Object)">
            <summary>
            Use the target types definition of equality
            </summary>
        </member>
        <member name="M:Serenity.Reflection.ObjectAccessor.GetHashCode">
            <summary>
            Obtain the hash of the target object
            </summary>
        </member>
        <member name="M:Serenity.Reflection.ObjectAccessor.ToString">
            <summary>
            Use the target's definition of a string representation
            </summary>
        </member>
        <member name="M:Serenity.Reflection.ObjectAccessor.Create(System.Object)">
            <summary>
            Wraps an individual object, allowing by-name access to that instance
            </summary>
        </member>
        <member name="T:Serenity.Reflection.TypeAccessor">
            <summary>
            Provides by-name member-access to objects of a given type
            </summary>
        </member>
        <member name="P:Serenity.Reflection.TypeAccessor.CreateNewSupported">
            <summary>
            Does this type support new instances via a parameterless constructor?
            </summary>
        </member>
        <member name="M:Serenity.Reflection.TypeAccessor.CreateNew">
            <summary>
            Create a new instance of this type
            </summary>
        </member>
        <member name="M:Serenity.Reflection.TypeAccessor.Create(System.Type)">
            <summary>
            Provides a type-specific accessor, allowing by-name access for all objects of that type
            </summary>
            <remarks>The accessor is cached internally; a pre-existing accessor may be returned</remarks>
        </member>
        <member name="P:Serenity.Reflection.TypeAccessor.Item(System.Object,System.String)">
            <summary>
            Get or set the value of a named member on the target instance
            </summary>
        </member>
        <member name="T:Serenity.Check">
            <summary>
            Contains argument validation methods
            </summary>
        </member>
        <member name="M:Serenity.Check.NotNull(System.Object,System.String)">
            <summary>
            Checks argument is not null
            </summary>
        </member>
        <member name="M:Serenity.Check.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Checks argument is not null or empty
            </summary>
        </member>
        <member name="M:Serenity.Check.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Checks argument is not null or string containing whitespace only
            </summary>
        </member>
        <member name="T:Serenity.Data.BinarySerialization">
            <summary>
            Contains helper functions for serialization and deserialization of data items (e.g.cached items)
            </summary>
        </member>
        <member name="M:Serenity.Data.BinarySerialization.Serialize(System.Action{System.IO.BinaryWriter})">
            <summary>
            A helper method to serialize objects with BinaryWriter. Creates a memory stream 
            and a BinaryWriter on it, and invokes the callback specified.
            </summary>
            <param name="serialize">Serialization delegate</param>
        </member>
        <member name="M:Serenity.Data.BinarySerialization.Deserialize``1(System.Byte[],System.Func{System.IO.BinaryReader,``0})">
            <summary>
            A helper method to deserialize objects with BinaryWriter. Creates a memory stream 
            and a BinaryReader on it, and invokes the callback specified.
            </summary>
            <param name="input">Input array</param>
            <param name="deserialize">Deserialization delegate</param>
        </member>
        <member name="T:Serenity.Data.Base32">
            <summary>
              This class is based on the Base32 class from DC# 0.31
              All credits to Jonathan Bindel.</summary>
        </member>
        <member name="M:Serenity.Data.Base32.#ctor">
            <summary>
              Solo constructor is private to prevent external instantiation of this class</summary>
        </member>
        <member name="M:Serenity.Data.Base32.Encode(System.Byte[])">
            <summary>
              Encode a buffer using the default options</summary>
            <param name="bytes">
              The buffer (required).</param>
            <returns>
              An encoded string that holds the contents of the inputs</returns>
        </member>
        <member name="M:Serenity.Data.Base32.Decode(System.String)">
            <summary>
              Decode a Base32 string into a byte array</summary>
            <param name="base32">
              The Base32 string (required)</param>
            <returns>
              The decoded byte array</returns>
        </member>
        <member name="T:Serenity.Data.JsonSafeInt64Converter">
            <summary>
              Serialize/deserialize a row</summary>
        </member>
        <member name="M:Serenity.Data.JsonSafeInt64Converter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Writes the JSON representation of the object.</summary>
            <param name="writer">
              The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">
              The value.</param>
            <param name="serializer">
              The calling serializer.</param>
        </member>
        <member name="M:Serenity.Data.JsonSafeInt64Converter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Reads the JSON representation of the object.</summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">
              Type of the object.</param>
            <param name="existingValue">
              The existing value of object being read.</param>
            <param name="serializer">
              The calling serializer.</param>
            <returns>
              The object value.</returns>
        </member>
        <member name="M:Serenity.Data.JsonSafeInt64Converter.CanConvert(System.Type)">
            <summary>
              Determines whether this instance can convert the specified object type.</summary>
            <param name="objectType">
              Type of the object.</param>
            <returns>
              True if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="P:Serenity.Data.JsonSafeInt64Converter.CanRead">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="P:Serenity.Data.JsonSafeInt64Converter.CanWrite">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="T:Serenity.IO.GlobFilter">
            <summary>
            A fast glob implementation, compatible with .gitignore patterns of GIT
            </summary>
        </member>
        <member name="M:Serenity.IO.GlobFilter.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new GlobFilter, containing both include and exclude patterns.
            When "include" is null / empty, all files are included by default, unless
            they match a pattern in "exclude" list.
            When "exclude" is null, it is ignored.
            </summary>
            <param name="include">List of include patterns</param>
            <param name="exclude">List of exclude patterns</param>
        </member>
        <member name="M:Serenity.IO.GlobFilter.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new GlobFilter, with just "include" globs.
            </summary>
            <param name="globs">List of patterns</param>
        </member>
        <member name="T:Serenity.IO.DeleteType">
            <summary>
              File deletion type.</summary>
        </member>
        <member name="F:Serenity.IO.DeleteType.Delete">
            <summary>
              Force delete</summary>
        </member>
        <member name="F:Serenity.IO.DeleteType.TryDelete">
            <summary>
              Try to delete</summary>
        </member>
        <member name="F:Serenity.IO.DeleteType.TryDeleteOrMark">
            <summary>
              Try to delete and mark if can't delete</summary>
        </member>
        <member name="T:Serenity.IO.TemporaryFileHelper">
            <summary>
              Contains helper functions for temporary files and folders</summary>
        </member>
        <member name="F:Serenity.IO.TemporaryFileHelper.DefaultTemporaryCheckFile">
            <summary>
              A signature file that marks a folder as a temporary file to ensure that it actually contains temporary
              files and can be safely cleaned</summary>
        </member>
        <member name="F:Serenity.IO.TemporaryFileHelper.DefaultAutoExpireTime">
            <summary>
              By default, files older than 1 hour is cleared</summary>
        </member>
        <member name="F:Serenity.IO.TemporaryFileHelper.DefaultMaxFilesInDirectory">
            <summary>
              By default, if more than 1000 files exists in directory, they are deleted</summary>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.PurgeDirectoryDefault(System.String)">
            <summary>
              Clears a folder based on default conditions</summary>
            <param name="directoryToClean">
              Folder to be cleared</param>
            <remarks>
              If any errors occur during cleanup, this doesn't raise an exception
              and ignored. Other errors might raise an exception. As errors are
              ignored, method can't gurantee that less than specified number of files
              will be in the folder after it ends.</remarks>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.PurgeDirectory(System.String,System.TimeSpan,System.Int32,System.String)">
            <summary>
              Clears a folder based on specified conditions</summary>
            <param name="directoryToClean">
              Folder to be cleared</param>
            <param name="autoExpireTime">
              Files with creation time older than this is deleted. If passed as 0, time
              based cleanup is skipped.</param>
            <param name="maxFilesInDirectory">
              If more than this number of files exists, files will be deleted starting from 
              oldest to newest. By passing 0, all files can be deleted. If passed as -1,
              file count based cleanup is skipped.</param>
            <param name="checkFileName">
              Safety file to be checked. If it is specified and it doesn't exists, operation
              is aborted.</param>
            <remarks>
              If any errors occur during cleanup, this doesn't raise an exception
              and ignored. Other errors might raise an exception. As errors are
              ignored, method can't gurantee that less than specified number of files
              will be in the folder after it ends.</remarks>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.TryDelete(System.String)">
            <summary>
              Tries to delete a file with given path.</summary>
            <param name="filePath">
              File to be deleted (can be null).</param>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.Delete(System.String)">
            <summary>
              Deletes a file.</summary>
            <param name="filePath">
              File to be deleted (can be null).</param>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.Delete(System.String,Serenity.IO.DeleteType)">
            <summary>
              Deletes, tries to delete or marks a file for deletion depending on type.</summary>
            <param name="filePath">
              File to be deleted (can be null).</param>
            <param name="type">
              Delete type.</param>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.TryDeleteOrMark(System.String)">
            <summary>
              Tries to delete a file or marks it for deletion by DeleteMarkedFiles method by
              creating a ".delete" file.</summary>
            <param name="filePath">
              File to be deleted</param>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.TryDeleteMarkedFiles(System.String)">
            <summary>
              Tries to delete all files that is marked for deletion by TryDeleteOrMark in a folder.</summary>
            <param name="path">
              Path of marked files to be deleted</param>
        </member>
        <member name="M:Serenity.IO.TemporaryFileHelper.RandomFileCode">
            <summary>
              Gets a 13 character random code that can be used safely in a filename</summary>
            <returns>
              A random code.</returns>
        </member>
        <member name="T:Serenity.Localization.JsonLocalTextRegistration">
            <summary>
            Contains helper methods for registration of local texts in hierarchical/dictionary formatted JSON files.
            </summary>
        </member>
        <member name="M:Serenity.Localization.JsonLocalTextRegistration.AddFromNestedDictionary(System.Collections.Generic.IDictionary{System.String,Newtonsoft.Json.Linq.JToken},System.String,System.String,Serenity.Abstractions.ILocalTextRegistry)">
            <summary>
            Adds translation from a hierarchical local text dictionary parsed from JSON file.
            </summary>
            <param name="nested">Object parsed from local text JSON string</param>
            <param name="prefix">Prefix to prepend before local text keys</param>
            <param name="languageID">Language ID</param>
            <param name="registry">Registry</param>
        </member>
        <member name="M:Serenity.Localization.JsonLocalTextRegistration.ProcessNestedDictionary(System.Collections.Generic.IDictionary{System.String,Newtonsoft.Json.Linq.JToken},System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Converts translation from a hierarchical local text dictionary to a simple dictionary.
            </summary>
            <param name="nested">Object parsed from local text JSON string</param>
            <param name="prefix">Prefix to prepend before local text keys</param>
            <param name="target">Target dictionary that will contain keys and translations</param>
        </member>
        <member name="M:Serenity.Localization.JsonLocalTextRegistration.AddFromFilesInFolder(System.String,Serenity.Abstractions.ILocalTextRegistry)">
            <summary>
            Adds translations from JSON files at specified path. File names in this directory should be in format 
            {anyprefix}.{languageID}.json where {languageID} is a language code like 'en', 'en-GB' etc.
            </summary>
            <param name="path">Path containing JSON files</param>
            <param name="registry">Registry</param>
        </member>
        <member name="T:Serenity.Localization.InitializedLocalText">
            <summary>
            A subclass of LocalText class that contains a initial translation value.
            Some classes like NestedLocalTextRegistration uses this type to avoid re-registering
            a initialized local text object, when their Initialization method called more than once.
            </summary>
        </member>
        <member name="T:Serenity.Localization.FallbackLocalTextRegistry">
            <summary>
            Adds key fallback to any ILocalTextRegistry implementation
            </summary>
        </member>
        <member name="M:Serenity.Localization.FallbackLocalTextRegistry.TryGet(System.String,System.String)">
            <summary>
            Returns localized representation which corresponds to the local text key or the fallback if none 
            found in the registry.
            </summary>
            <param name="key">Local text key (e.g. Enums.Month.June)</param>
            <param name="languageID">Language identifier</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Localization.FallbackLocalTextRegistry.Add(System.String,System.String,System.String)">
            <summary>
            Adds a local text entry to the registry
            </summary>
            <param name="languageID">Language ID (e.g. en-US, tr-TR)</param>
            <param name="key">Local text key</param>
            <param name="text">Translated text</param>
        </member>
        <member name="M:Serenity.Localization.FallbackLocalTextRegistry.TryGetKeyFallback(System.String)">
            <summary>
            Get a fallback of the local text key
            </summary>
            <param name="key">Local text key</param>
            <returns>Local text key fallback</returns>
        </member>
        <member name="M:Serenity.Localization.FallbackLocalTextRegistry.BreakUpString(System.String)">
            <summary>
            Break up string without spaces (e.g. LastDirectoryUpdate) 
            into a normal string (e.g. 'Last Directory Update')
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Localization.NestedPermissionKeyRegistration">
            <summary>
            Contains helper methods for registration of permission keys in nested static classes.
            These classes contains string contants containing permission keys. 
            Display name for permission keys can be set by [DisplayName] attribute.
            Display name for groups can be set by [Description] attribute on classes themselves.
            For group display name to work, all constants in a class must start with same group prefix.
            </summary>
        </member>
        <member name="M:Serenity.Localization.NestedPermissionKeyRegistration.AddNestedPermissions(Serenity.Abstractions.ILocalTextRegistry,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets permission keys and adds texts if any from static nested permission key classes marked with NestedPermissionKeys attribute.
            </summary>
        </member>
        <member name="T:Serenity.Localization.ILocalTextContext">
            <summary>
            Local text context abstraction for sites that support a pending approval mode.
            </summary>
        </member>
        <member name="P:Serenity.Localization.ILocalTextContext.IsApprovalMode">
            <summary>
            Returns true if site is in pending approval mode for current user (e.g. a moderator)
            </summary>
        </member>
        <member name="T:Serenity.Localization.LocalTextRegistry">
            <summary>
            Default ILocalTextRegistry implementation.
            </summary>
            <remarks>
            This implementation also supports a "pending approval" mode. If your site needs some moderator
            approval before translations are published, you may put your site to this mode when
            some moderator is using the site by registering an ILocalTextContext provider. Thus,
            moderators can see unapproved texts while they are logged in to the site.
            </remarks>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.Add(System.String,System.String,System.String)">
            <summary>
            Adds a local text entry to the registry
            </summary>
            <param name="languageID">Language ID (e.g. en-US, tr-TR)</param>
            <param name="key">Local text key</param>
            <param name="text">Translated text</param>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.AddPending(System.String,System.String,System.String)">
            <summary>
            Adds a pending approval local text entry to the registry. These texts can only be seen
            while moderators are browsing the site. You can determine which users are moderators by
            implementing ILocalTextContext interface, and registering it through the service locator.
            </summary>
            <param name="languageID">Language ID (e.g. en-US, tr-TR)</param>
            <param name="key">Local text key</param>
            <param name="text">Translated text</param>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.TryGet(System.String,System.String)">
            <summary>
            Returns localized representation which corresponds to the local text key or the key itself if none 
            found in local text registry.
            </summary>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.TryGet(System.String,System.String,System.Boolean)">
            <summary>
            Converts the local text key to its representation in requested language. Looks up text
            in requested language, its Fallbacks and invariant language in order. If not found in any,
            null is returned. See SetLanguageFallback for information about language fallbacks.
            </summary>
            <param name="languageID">Language ID.</param>
            <param name="textKey">Local text key (can be null).</param>
            <param name="isApprovalMode">If pending approval texts to be used, true.</param>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.SetLanguageFallback(System.String,System.String)">
            <summary>
            Sets the language fallback of the specified language.
            When a text is not found in one language, LocalTextRegistry checks its language fallback for
            a translation. Some implicit language fallback definitions exist even if none set. For example, "en" is 
            language fallback ID of "en-US" and "en-UK", "tr" is language fallback ID of "tr-TR". Also, 
            invariant language ID ("") is an implicit fallback of all languages.
            </summary>
            <param name="languageID">Language identifier. (e.g. en-US)</param>
            <param name="languageFallbackID">language fallback identifier. (e.g. en)</param>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.GetAllAvailableTextsInLanguage(System.String,System.Boolean)">
            <summary>
              Gets all available text keys (that has a translation in language or any of its
              language fallbacks) and their local texts.</summary>
            <param name="languageID">
              Language ID (required).</param>
            <param name="pending">
              True if pending texts should be returned (e.g. in preview/edit mode).</param>
            <returns>
              A dictionary of all texts in the language.</returns>
        </member>
        <member name="M:Serenity.Localization.LocalTextRegistry.GetAllTextKeys(System.Boolean)">
            <summary>
            Gets all text keys that is currently registered in any language
            </summary>
        </member>
        <member name="T:Serenity.Localization.EnumLocalTextRegistration">
            <summary>
            Contains initialization method for adding local text translations defined by
            Description attributes in enumeration classes.
            </summary>
        </member>
        <member name="M:Serenity.Localization.EnumLocalTextRegistration.Initialize(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String,Serenity.Abstractions.ILocalTextRegistry)">
            <summary>
            Adds local text translations defined implicitly by Description attributes in 
            enumeration classes. Only enum values that has Description attribute are added as
            local text. By default, enums are registered in format:
            "Enums.{EnumerationTypeFullName}.{EnumValueName}". EnumerationTypeFullName, is
            fullname of the enumeration type. This can be overridden by attaching a EnumKey
            attribute.
            </summary>
            <param name="assemblies">Assemblies to search for enumeration classes in</param>
            <param name="languageID">Language ID texts will be added (default is invariant language)</param>
            <param name="registry">Registry</param>
        </member>
        <member name="T:Serenity.Localization.NestedLocalTextRegistration">
            <summary>
            Contains helper methods for registration of local texts in nested static classes.
            Nested static contains LocalText objects with actual translations as keys. This class locates
            them (with NestedLocalTextsAttribute at outermost class), determines keys by path from outermost
            to nested class name, replaces existing LocalText instance with a InitializedLocalText instance
            containing this generated key and initial translation, and registers this translation in 
            ILocalTextRegistry provider.
            </summary>
        </member>
        <member name="M:Serenity.Localization.NestedLocalTextRegistration.Initialize(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Serenity.Abstractions.ILocalTextRegistry)">
            <summary>
            Adds translations from static nested local text classes marked with NestedLocalTextAttribute.
            </summary>
        </member>
        <member name="T:Serenity.IUserDefinition">
            <summary>
            User definition abstraction.
            </summary>
            <remarks>Your application might have a class that implements this interface, e.g. UserDefinition, that has these properties plus some more
            specific to your app.</remarks>
        </member>
        <member name="P:Serenity.IUserDefinition.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:Serenity.IUserDefinition.Username">
            <summary>
            User login name
            </summary>
        </member>
        <member name="P:Serenity.IUserDefinition.DisplayName">
            <summary>
            Display name for user (can be same with Username)
            </summary>
        </member>
        <member name="P:Serenity.IUserDefinition.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:Serenity.IUserDefinition.IsActive">
            <summary>
            Is user active (1 = active, 0 = disabled, -1 = deleted)
            </summary>
        </member>
        <member name="T:Serenity.DistributedCache">
            <summary>
            Provides shortcuts to currently configured IDistributedCache provider.</summary>
        </member>
        <member name="M:Serenity.DistributedCache.Increment(System.String,System.Int32)">
            <summary>
            Increments value with specified key and returns the new value.
            If value doesn't exist, its new value will be 1.
            </summary>
            <param name="key">Key.</param>
            <param name="amount">Increase amount.</param>
            <returns>Increased amount, or 1 if it didn't exist before</returns>
        </member>
        <member name="M:Serenity.DistributedCache.Get``1(System.String)">
            <summary>
            Reads the value with given key. If value didn't exist in cache, 
            return the default(T) value. 
            </summary>
            <typeparam name="TValue">Value type</typeparam>
            <param name="key">Key</param>
            <remarks>It may raise an exception if the value is not of type TValue.</remarks>
        </member>
        <member name="M:Serenity.DistributedCache.Set``1(System.String,``0)">
            <summary>
            Writes the value to cache with specified key.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Serenity.DistributedCache.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Writes the value to cache with specified key and
            expiration date.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="expiration">The time the cached item will be expired on.</param>
        </member>
        <member name="T:Serenity.Caching.DistributedCacheEmulator">
            <summary>
            In memory distributed cache implementation, which emulates an IDistributedCache.
            </summary>
        </member>
        <member name="F:Serenity.Caching.DistributedCacheEmulator.sync">
            <summary>
            The synchronization lock
            </summary>
        </member>
        <member name="F:Serenity.Caching.DistributedCacheEmulator.dictionary">
            <summary>
            The dictionary that contains cached items
            </summary>
        </member>
        <member name="F:Serenity.Caching.DistributedCacheEmulator.expiration">
            <summary>
            The dictionary that contains expiration dates for keys that added with an expiration
            </summary>
        </member>
        <member name="M:Serenity.Caching.DistributedCacheEmulator.Increment(System.String,System.Int32)">
            <summary>
            Increments value with specified key and returns the new value.
            If value doesn't exist, its new value will be 1.
            </summary>
            <param name="key">Key.</param>
            <param name="amount">Increase amount.</param>
            <returns>Increased amount, or 1 if it didn't exist before</returns>
        </member>
        <member name="M:Serenity.Caching.DistributedCacheEmulator.Get``1(System.String)">
            <summary>
            Reads the value with given key. If value didn't exist in cache, 
            return the default(T) value. 
            </summary>
            <typeparam name="TValue">Value type</typeparam>
            <param name="key">Key</param>
            <remarks>It may raise an exception if the value is not of type TValue.</remarks>
        </member>
        <member name="M:Serenity.Caching.DistributedCacheEmulator.Set``1(System.String,``0)">
            <summary>
            Writes the value to cache with specified key.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Serenity.Caching.DistributedCacheEmulator.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            Writes the value to cache with specified key.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="expiration">Expiration</param>
        </member>
        <member name="M:Serenity.Caching.DistributedCacheEmulator.Reset">
            <summary>
            Used for testing purposes to clear all cache items
            </summary>
        </member>
        <member name="T:Serenity.LocalCache">
            <summary>
            Contains helper functions to access currently registered ILocalCache provider.
            </summary>
        </member>
        <member name="F:Serenity.LocalCache.StaticProvider">
            <summary>
            Use to skip Dependency.Resolve calls only when performance is critical
            </summary>
        </member>
        <member name="M:Serenity.LocalCache.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds a value to cache with a given key
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiration">Expire time (Use TimeSpan.Zero to hold value with no expiration)</param>
        </member>
        <member name="M:Serenity.LocalCache.Get``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            Reads the value with specified key from the local cache. If it doesn't exists in cache, calls the loader 
            function to generate value (from database etc.) and adds it to the cache. If loader returns a null value, 
            it is written to the cache as DBNull.Value.
            </summary>
            <typeparam name="TItem">Data type</typeparam>
            <param name="cacheKey">Key</param>
            <param name="expiration">Expiration (TimeSpan.Zero means no expiration)</param>
            <param name="loader">Loader function that will be called if item doesn't exist in the cache.</param>
        </member>
        <member name="M:Serenity.LocalCache.TryGet``1(System.String)">
            <summary>
            Reads the value of given type with specified key from the local cache. If the value doesn't exist or not
            of given type, it returns null.
            </summary>
            <typeparam name="TItem">Expected type</typeparam>
            <param name="cacheKey">Key</param>
        </member>
        <member name="M:Serenity.LocalCache.Remove(System.String)">
            <summary>
            Removes the value with specified key from the local cache. If the value doesn't exist, no error is raised.
            </summary>
            <param name="cacheKey">Key</param>
        </member>
        <member name="M:Serenity.LocalCache.RemoveAll">
            <summary>
            Removes all items from the cache (avoid expect unit tests).
            </summary>
        </member>
        <member name="T:Serenity.TwoLevelCache">
            <summary>
            Contains helper functions to use local and distributed cache in sync with optional cache invalidation.
            </summary>
        </member>
        <member name="M:Serenity.TwoLevelCache.Get``1(System.String,System.TimeSpan,System.TimeSpan,System.String,System.Func{``0})">
            <summary>
            Tries to read a value from local cache. If it is not found there, tries the distributed cache. 
            If neither contains the specified key, produces value by calling a loader function and adds the
            value to local and distributed cache for a given expiration time. By using a group key, 
            all items on both cache types that are members of this group can be expired at once. </summary>
            <remarks>
            To not check group generation every time an item is requested, generation number itself is also
            cached in local cache. Thus, when a generation number changes, local cached items might expire
            after about 5 seconds. This means that, if you use this strategy in a web farm setup, when a change 
            occurs in one server, other servers might continue to use old local cached data for 5 seconds more.
            If this is a problem for your configuration, use DistributedCache directly.
            </remarks>
            <typeparam name="TItem">Data type</typeparam>
            <param name="cacheKey">The item key for local and distributed cache</param>
            <param name="localExpiration">Local expiration</param>
            <param name="remoteExpiration">Distributed cache expiration (is usually same with local expiration)</param>
            <param name="groupKey">Group key that will hold generation (version). Can be used to expire all items
            that depend on it. This can be a table name. When a table changes, you change its version, and all
            cached data that depends on that table is expired.</param>
            <param name="loader">The delegate that will be called to generate value, if not found in local cache,
            or distributed cache, or all found items are expired.</param>
        </member>
        <member name="M:Serenity.TwoLevelCache.Get``1(System.String,System.TimeSpan,System.String,System.Func{``0})">
            <summary>
            Tries to read a value from local cache. If it is not found there, tries the distributed cache. 
            If neither contains the specified key, produces value by calling a loader function and adds the
            value to local and distributed cache for a given expiration time. By using a group key, 
            all items on both cache types that are members of this group can be expired at once. </summary>
            <remarks>
            To not check group generation every time an item is requested, generation number itself is also
            cached in local cache. Thus, when a generation number changes, local cached items might expire
            after about 5 seconds. This means that, if you use this strategy in a web farm setup, when a change 
            occurs in one server, other servers might continue to use old local cached data for 5 seconds more.
            If this is a problem for your configuration, use DistributedCache directly.
            </remarks>
            <typeparam name="TItem">Data type</typeparam>
            <param name="cacheKey">The item key for local and distributed cache</param>
            <param name="expiration">Local and remote expiration</param>
            <param name="groupKey">Group key that will hold generation (version). Can be used to expire all items
            that depend on it. This can be a table name. When a table changes, you change its version, and all
            cached data that depends on that table is expired.</param>
            <param name="loader">The delegate that will be called to generate value, if not found in local cache,
            or distributed cache, or all found items are expired.</param>
        </member>
        <member name="M:Serenity.TwoLevelCache.GetWithCustomSerializer``2(System.String,System.TimeSpan,System.TimeSpan,System.String,System.Func{``0},System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            Tries to read a value from local cache. If it is not found there, tries the distributed cache. 
            If neither contains the specified key, produces value by calling a loader function and adds the
            value to local and distributed cache for a given expiration time. By using a group
            key, all items on both cache types that are members of this group can be expired at once. </summary>
            <remarks>
            To not check group generation every time an item is requested, generation number itself is also
            cached in local cache. Thus, when a generation number changes, local cached items might expire
            after about 5 seconds. This means that, if you use this strategy in a web farm setup, when a change 
            occurs in one server, other servers might continue to use old local cached data for 5 seconds more.
            If this is a problem for your configuration, use DistributedCache directly.
            </remarks>
            <typeparam name="TItem">Data type</typeparam>
            <param name="cacheKey">The item key for local and distributed cache</param>
            <param name="localExpiration">Local expiration</param>
            <param name="remoteExpiration">Distributed cache expiration (is usually same with local 
            expiration)</param>
            <param name="groupKey">Group key that will hold generation (version). Can be used to expire all items
            that depend on it. This can be a table name. When a table changes, you change its version, and all
            cached data that depends on that table is expired.</param>
            <param name="loader">The delegate that will be called to generate value, if not found in local cache,
            or distributed cache, or all found items are expired.</param>
            <param name="serialize">A function used to serialize items before cached.</param>
            <param name="deserialize">A function used to deserialize items before cached.</param>
            <typeparam name="TSerialized">Serilized type</typeparam>
        </member>
        <member name="M:Serenity.TwoLevelCache.GetLocalStoreOnly``1(System.String,System.TimeSpan,System.String,System.Func{``0})">
            <summary>
            Tries to read a value from local cache. If it is not found there produces value by calling a loader 
            function and adds the value to local cache for a given expiration time. By using a generation 
            (item version) key, all items on local cache that are members of this group can be expired 
            at once. </summary>
            <remarks>
            The difference between this and Get method is that this one only caches items in local cache, but 
            uses distributed cache for versioning. To not check group generation every time an item is requested, 
            generation number itself is also cached in local cache. Thus, when a generation number changes, local 
            cached items might expire after about 5 seconds. This means that, if you use this strategy in a web farm 
            setup, when a change occurs in one server, other servers might continue to use old local cached data for 
            5 seconds more. If this is a problem for your configuration, use DistributedCache directly.
            </remarks>
            <typeparam name="TItem">Data type</typeparam>
            <param name="cacheKey">The item key for local and distributed cache</param>
            <param name="localExpiration">Local expiration</param>
            <param name="groupKey">Group key that will hold generation (version). Can be used to expire all items
            that depend on it. This can be a table name. When a table changes, you change its version, and all
            cached data that depends on that table is expired.</param>
            <param name="loader">The delegate that will be called to generate value, if not found in local cache,
            or distributed cache, or all found items are expired.</param>
        </member>
        <member name="M:Serenity.TwoLevelCache.GetSeed">
            <summary>
            Generates a seed for Random object.
            </summary>
            <returns>Random 32 bit seed</returns>
        </member>
        <member name="M:Serenity.TwoLevelCache.RandomGeneration">
            <summary>
            Generates a 64 bit random generation number (version key)
            </summary>
            <returns>Random 64 bit number</returns>
        </member>
        <member name="M:Serenity.TwoLevelCache.ChangeGlobalGeneration(System.String)">
            <summary>
            Changes a group generation value, so that all items that depend on it are expired.
            </summary>
            <param name="groupKey">Group key</param>
        </member>
        <member name="M:Serenity.TwoLevelCache.ExpireGroupItems(System.String)">
            <summary>
            Changes a group generation value, so that all items that depend on it are expired.
            </summary>
            <param name="groupKey">Group key</param>
        </member>
        <member name="M:Serenity.TwoLevelCache.Remove(System.String)">
            <summary>
            Removes a key from local, distributed caches, and removes their generation version information.
            </summary>
            <param name="cacheKey">Cache key</param>
        </member>
        <member name="M:Serenity.ExceptionExtensions.SetData(System.Exception,System.String,System.Object)">
            <summary>
              Sets custom exception data with given property name and value. Sets the data in base exception.</summary>
            <param name="exception">
              Exception to set custom data in.</param>
            <param name="property">
              Custom exception data name.</param>
            <param name="value">
              Custom exception data value.</param>
        </member>
        <member name="T:Serenity.DateElementOrder">
            <summary>
              Date element orders</summary>
        </member>
        <member name="F:Serenity.DateElementOrder.DayMonthYear">
            <summary>d/M/y</summary>
        </member>
        <member name="F:Serenity.DateElementOrder.MonthDayYear">
            <summary>M/d/y</summary>
        </member>
        <member name="F:Serenity.DateElementOrder.YearMonthDay">
            <summary>y/M/y</summary>
        </member>
        <member name="F:Serenity.DateHelper.ISODateTimeFormatUTC">
            <summary>
              ISO Date and Time Format (up to milliseconds).</summary>
        </member>
        <member name="F:Serenity.DateHelper.ISODateTimeFormatLocal">
            <summary>
              ISO Date and Time Format (up to milliseconds).</summary>
        </member>
        <member name="M:Serenity.DateHelper.TryParseISO8601DateTime(System.String,System.DateTime@)">
            <summary>
              Tries to parse an ISO 8601 date-time string.</summary>
            <param name="value">
              String to be parsed</param>
            <param name="date">
              Parameter to return parsed date-time value in.</param>
            <returns>
              True if string is a valid ISO8601 date-time string.</returns>
        </member>
        <member name="P:Serenity.DateHelper.CurrentDateElementOrder">
            <summary>
              Returns one of "dmy", "ymd", "mdy" date element order depending on current culture.</summary>
            <returns>
              Active date element order.</returns>
        </member>
        <member name="M:Serenity.DateHelper.DateOrderString(Serenity.DateElementOrder)">
            <summary>
              Gets date order string (one of "dmy", "ymd", "mdy") for a specified order.</summary>
            <param name="order">
              Order</param>
            <returns>
              Date order string</returns>
        </member>
        <member name="M:Serenity.DateHelper.DefaultDateFormat(Serenity.DateElementOrder)">
            <summary>
              Gets defalt date format for specified order.</summary>
            <param name="order">
              Order</param>
            <returns>
              One of "dd/MM/yyyy", "MM/dd/yyyy", "yyyy/MM/dd".</returns>
        </member>
        <member name="M:Serenity.DateHelper.DefaultDateTimeFormat(Serenity.DateElementOrder)">
            <summary>
              Gets defalt date time format for specified order.</summary>
            <param name="order">
              Order</param>
            <returns>
              One of "dd/MM/yyyy HH:mm:ss", "MM/dd/yyyy HH:mm:ss", "yyyy/MM/dd HH:mm:ss".</returns>       
        </member>
        <member name="P:Serenity.DateHelper.CurrentDateFormat">
            <summary>
              Gets default date format for current culture.</summary>
        </member>
        <member name="P:Serenity.DateHelper.CurrentDateTimeFormat">
            <summary>
              Gets default date time format for current culture.</summary>
        </member>
        <member name="T:Serenity.Dependency">
            <summary>
            Service locator for Serenity. It requires setting an IoC container 
            that implements IDependencyResolver interface through SetResolver 
            method to operate normally.
            </summary>
        </member>
        <member name="M:Serenity.Dependency.Resolve``1">
            <summary>
            Maps TService service to its registered provider.
            </summary>
            <typeparam name="TService">Service type</typeparam>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No provider is registered for TService</exception>
            <exception cref="T:System.InvalidProgramException">
            No dependency resolver is configured using SetResolver</exception>
        </member>
        <member name="M:Serenity.Dependency.Resolve``1(System.String)">
            <summary>
            Maps TService service to its registered provider for specified scope.
            Use this method when an interface can be handled by different providers
            in different scopes (e.g. Application / Server configuration scope)
            </summary>
            <typeparam name="TService">Service type</typeparam>
            <param name="name">Scope name</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            No provider is registered for TService</exception>
            <exception cref="T:System.InvalidProgramException">
            No dependency resolver is configured using SetResolver</exception>
        </member>
        <member name="M:Serenity.Dependency.TryResolve``1">
            <summary>
            Maps TService service to its registered provider. 
            Returns null if registration for TService doesn't exist or 
            no dependency resolver is configured using SetResolver.
            </summary>
            <typeparam name="TService">Service type</typeparam>
        </member>
        <member name="M:Serenity.Dependency.TryResolve``1(System.String)">
            <summary>
            Maps TService service to its registered provider for specified scope.
            Returns null if registration for TService doesn't exist or 
            no dependency resolver is configured using SetResolver.
            Use this method when an interface can be handled by different providers
            in different scopes (e.g. Application / Server configuration scope)
            </summary>
            <typeparam name="TService">Service type</typeparam>
            <param name="name">Scope name</param>
        </member>
        <member name="M:Serenity.Dependency.SetResolver(Serenity.IDependencyResolver)">
            <summary>
            Sets current dependency resolver and returns previous one if exists.
            </summary>
            <param name="value">Dependency resolver</param>
        </member>
        <member name="P:Serenity.Dependency.HasResolver">
            <summary>
            Returns true if a dependency resolver is set through SetResolver.
            Use this property to check if there is a current resolver as Resolver 
            property raises an exception if not.
            </summary>
        </member>
        <member name="P:Serenity.Dependency.Resolver">
            <summary>
            Returns currently registered IDependencyResolver implementation.
            </summary>
            <exception cref="T:System.InvalidProgramException">
            No dependency resolver is configured using SetResolver</exception>
        </member>
        <member name="T:Serenity.Config">
            <summary>
            Central location to access configuration settings.
            </summary>
        </member>
        <member name="M:Serenity.Config.Get(System.Type)">
            <summary>
            Returns configuration settings for specified setting type. 
            If setting is not found in its storage, returns a new object instance.
            </summary>
            <param name="settingType">Setting type.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            IConfigurationRepository for setting scope is not set.</exception>
        </member>
        <member name="M:Serenity.Config.TryGet(System.Type)">
            <summary>
            Returns configuration settings for specified setting type. 
            If setting is not found in its storage, returns a new object instance.
            If IConfigurationRepository for setting scope is not set returns null.
            </summary>
            <param name="settingType">Setting type.</param>
        </member>
        <member name="M:Serenity.Config.Get``1">
            <summary>
            Returns configuration settings for specified setting type. 
            If setting is not found in its storage, returns a new object instance.
            </summary>
            <typeparam name="TSettings">Setting type</typeparam>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            IConfigurationRepository for setting scope is not set.</exception>
        </member>
        <member name="M:Serenity.Config.TryGet``1">
            <summary>
            Returns configuration settings for specified setting type. 
            If setting is not found in its storage, returns a new object instance.
            If IConfigurationRepository for setting scope is not set returns null.
            </summary>
            <typeparam name="TSettings">Setting type.</typeparam>
        </member>
        <member name="M:Serenity.UriHelper.Combine(System.String,System.String)">
            <summary>
              Combine a url with a filename by inserting "/" char between them.This works like Path.Combine
             </summary>
            <param name="url">
              URL will be combined (null or empty can be used).</param>
            <param name="fileName">
              Filename or Path (required).</param>
            <returns>
              New string which consists of combining URL and Filename by inserting "/" char 
              between them
            </returns>
            <remarks>
              This function is used for only simple combining actions. like ".." relative actions 
              doesn't be checked as well as URL with querystring doesn't be supported. 
             </remarks>
        </member>
        <member name="T:Serenity.ExceptionLog">
            <summary>
              Centralized logger for exceptions.</summary>
        </member>
        <member name="M:Serenity.ExceptionLog.Log(System.Exception)">
            <summary>
              Logs an exception. Nothing logged if exception logger delegate is not set.</summary>
            <param name="e"></param>
        </member>
        <member name="T:Serenity.Authorization">
            <summary>
            Provides a common access point for authorization related services
            </summary>
        </member>
        <member name="P:Serenity.Authorization.IsLoggedIn">
            <summary>
            Returns true if user is logged in.
            </summary>
            <remarks>
            Uses the IAuthorizationService dependency.
            </remarks>
        </member>
        <member name="P:Serenity.Authorization.UserDefinition">
            <summary>
            Returns user definition for currently logged user.
            </summary>
            <remarks>
            Uses IUserRetrieveService to get definition of current user by
            its username.
            </remarks>
        </member>
        <member name="P:Serenity.Authorization.UserId">
            <summary>
            Returns currently logged user ID
            </summary>
            <remarks>
            This is a shortcut to UserDefinition.UserId.
            </remarks>
        </member>
        <member name="P:Serenity.Authorization.Username">
            <summary>
            Returns currently logged username.
            </summary>
            <remarks>Uses IAuthorizationService dependency.</remarks>
        </member>
        <member name="M:Serenity.Authorization.HasPermission(System.String)">
            <summary>
            Returns true if current user has given permission.
            </summary>
            <param name="permission">Permission key (e.g. Administration)</param>
        </member>
        <member name="M:Serenity.Authorization.ValidateLoggedIn">
            <summary>
            Checks if there is a currently logged user and throws a validation error with
            "NotLoggedIn" error code if not.
            </summary>
        </member>
        <member name="M:Serenity.Authorization.ValidatePermission(System.String)">
            <summary>
            Checks if current user has given permission and throws a validation error with 
            "AccessDenied" error code if not.
            </summary>
            <param name="permission"></param>
        </member>
        <member name="T:Serenity.Services.JsonStringHashSetConverter">
            <summary>
              Serialize/deserialize a IdentifierSet object as string</summary>
        </member>
        <member name="M:Serenity.Services.JsonStringHashSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Writes the JSON representation of the object.</summary>
            <param name="writer">
              The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">
              The value.</param>
            <param name="serializer">
              The calling serializer.</param>
        </member>
        <member name="M:Serenity.Services.JsonStringHashSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Reads the JSON representation of the object.</summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">
              Type of the object.</param>
            <param name="existingValue">
              The existing value of object being read.</param>
            <param name="serializer">
              The calling serializer.</param>
            <returns>
              The object value.</returns>
        </member>
        <member name="M:Serenity.Services.JsonStringHashSetConverter.CanConvert(System.Type)">
            <summary>
              Determines whether this instance can convert the specified object type.</summary>
            <param name="objectType">
              Type of the object.</param>
            <returns>
              True if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="P:Serenity.Services.JsonStringHashSetConverter.CanRead">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="P:Serenity.Services.JsonStringHashSetConverter.CanWrite">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="M:Serenity.JSON.Parse``1(System.String)">
            <summary>
            Deserializes a JSON string to an object
            </summary>
            <typeparam name="T">Type to deserialize</typeparam>
            <param name="input">JSON string</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Serenity.JSON.Parse(System.String,System.Type)">
            <summary>
            Deserializes a JSON string to an object
            </summary>
            <param name="targetType">Type to deserialize</param>
            <param name="input">JSON string</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Serenity.JSON.ParseTolerant``1(System.String)">
            <summary>
            Deserializes a JSON string to an object, using more tolerant settings.
            </summary>
            <typeparam name="T">Type to deserialize</typeparam>
            <param name="input">JSON strng</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Serenity.JSON.ParseTolerant(System.String,System.Type)">
            <summary>
            Deserializes a JSON string to an object, using more tolerant settings
            </summary>
            <param name="targetType">Type to deserialize</param>
            <param name="input">JSON string</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Serenity.JSON.Stringify(System.Object)">
            <summary>
            Converts object to its JSON representation
            </summary>
            <param name="value">Value to convert to JSON</param>
            <returns>Serialized JSON string</returns>
        </member>
        <member name="M:Serenity.JSON.StringifyIndented(System.Object,System.Int32)">
            <summary>
            Converts object to its JSON representation
            </summary>
            <param name="value">Value to convert to JSON</param>
            <param name="indentation">Indentation (default 4)</param>
            <returns>Serialized JSON string</returns>
        </member>
        <member name="M:Serenity.JSON.ToJson(System.Object)">
            <summary>
              Converts an object to its JSON representation (extension method for Stringify)</summary>
            <param name="value">
              Object</param>
            <returns>
              JSON representation string.</returns>
            <remarks>
              null, Int32, Boolean, DateTime, Decimal, Double, Guid types handled automatically.
              If object has a ToJson method it is used, otherwise value.ToString() is used as last fallback.</remarks>
        </member>
        <member name="F:Serenity.Invariants.NumberFormat">
            <summary>
              Number format information for invariant culture</summary>
        </member>
        <member name="F:Serenity.Invariants.DateTimeFormat">
            <summary>
              Date time format information for invariant culture</summary>
        </member>
        <member name="M:Serenity.Invariants.#cctor">
            <summary>
              Statik DataHelper contructor'ı. Varsayılan bağlantı string'i ve bağlantı kültürü parametlerini
              initialize eder.
            </summary>
        </member>
        <member name="M:Serenity.Invariants.TryParseID(System.String)">
            <summary>
              <p>Tries to converts an ID's string representation to its numerical ID value (Int64).</p>
              <p>Unlike <see cref="M:System.Int64.Parse(System.String)"/>, <c>null</c>, empty string and all other
              invalid strings results in <see cref="T:System.Int64"/> value (not an exception).</p></summary>
            <param name="str">
              String representation of an ID.</param>
            <returns>
              Numerical ID value or Null.Int64 if null, empty, or invalid string.</returns>
            <seealso cref="M:Serenity.Invariants.TryParseID(System.String)"/>
            <seealso cref="M:System.Int64.Parse(System.String)"/>
        </member>
        <member name="M:Serenity.Invariants.TryParseID32(System.String)">
            <summary>
              <p>Tries to converts an ID's string representation to its numerical ID value (Int64).</p>
              <p>Unlike <see cref="M:System.Int64.Parse(System.String)"/>, <c>null</c>, empty string and all other
              invalid strings results in <see cref="T:System.Int64"/> value (not an exception).</p></summary>
            <param name="str">
              String representation of an ID.</param>
            <returns>
              Numerical ID value or Null.Int64 if null, empty, or invalid string.</returns>
            <seealso cref="M:Serenity.Invariants.TryParseID(System.String)"/>
            <seealso cref="M:System.Int64.Parse(System.String)"/>
        </member>
        <member name="M:Serenity.Invariants.IDString(System.Nullable{System.Int64})">
            <summary>
              Converts an ID value, to its string representation.</summary>
            <param name="id">
              ID value.</param>
            <returns>
              If <paramref name="id"/> has <see cref="T:System.Int64"/> value, <c>String.Empty</c>, 
              otherwise its string representation</returns>
        </member>
        <member name="T:Serenity.LocalText">
            <summary>
            Defines a localizable text resource. Contains a local text key and has implicit conversions to and 
            from String.
            </summary>
        </member>
        <member name="F:Serenity.LocalText.InvariantLanguageID">
            <summary>
            Invariant language ID is an empty string
            </summary>
        </member>
        <member name="F:Serenity.LocalText.Empty">
            <summary>
            An empty local text instance like String.Empty
            </summary>
        </member>
        <member name="M:Serenity.LocalText.#ctor(System.String)">
            <summary>
            Creates a new LocalText instance that contains the specified local text key
            </summary>
            <param name="key">Local text key</param>
        </member>
        <member name="P:Serenity.LocalText.Key">
            <summary>
            Gets the local text key
            </summary>
        </member>
        <member name="M:Serenity.LocalText.ToString">
            <summary>
            Returns localized representation which corresponds to the local text key or the key itself if none 
            found in local text registry.
            </summary>
        </member>
        <member name="M:Serenity.LocalText.op_Implicit(Serenity.LocalText)~System.String">
            <summary>
            Implicit conversion to String that returns localized representation which corresponds to the local 
            text key or the key itself if none found in local text registry.
            </summary>
        </member>
        <member name="M:Serenity.LocalText.op_Implicit(System.String)~Serenity.LocalText">
            <summary>
            Implicit conversion from String that creates a new instance of LocalText with the specified key.
            </summary>
            <param name="key">Local text key</param>
        </member>
        <member name="M:Serenity.LocalText.Get(System.String)">
            <summary>
            Returns localized representation which corresponds to the local text key or the key itself if none 
            found in local text registry.
            </summary>
        </member>
        <member name="M:Serenity.LocalText.TryGet(System.String)">
            <summary>
            Returns localized representation which corresponds to the local text key or NULL if none found 
            in local text registry.
            </summary>
        </member>
        <member name="T:Serenity.StringHelper">
            <summary>
              This static class contains some helper functions that operate on <see cref="T:System.String"/> objects.</summary>
        </member>
        <member name="M:Serenity.StringHelper.IsEmptyOrNull(System.String)">
            <summary>
              <p>Returns true if <see cref="T:System.String"/> is <c>null</c> or empty (zero length)</p></summary>
            <remarks>
              <p>This function might be useful if an empty string is assumed to be <c>null</c>.</p>
              <p>This is an extension method, so it can be called directly as <c>str.IsNullOrEmpty()</c>.</p></remarks>
            <param name="str">
              String.</param>
            <returns>
              If <paramref name="str"/> is <c>null</c> or empty, <c>true</c></returns>
        </member>
        <member name="M:Serenity.StringHelper.IsNullOrEmpty(System.String)">
            <summary>
              <p>Returns true if <see cref="T:System.String"/> is <c>null</c> or empty (zero length)</p></summary>
            <remarks>
              <p>This function might be useful if an empty string is assumed to be <c>null</c>.</p>
              <p>This is an extension method, so it can be called directly as <c>str.IsNullOrEmpty()</c>.</p></remarks>
            <param name="str">
              String.</param>
            <returns>
              If <paramref name="str"/> is <c>null</c> or empty, <c>true</c></returns>
        </member>
        <member name="M:Serenity.StringHelper.IsTrimmedEmpty(System.String)">
            <summary>
              Checks if a string <see cref="T:System.String"/> is <c>null</c>, empty or just contains whitespace
              characters.</summary>
            <remarks>
              <p><b>Warning:</b> "\n" (line end), "\t" (tab) and some other are also considered as whitespace). 
              To see a list see <see cref="M:System.String.Trim" /> function.</p>
              <p>This is an extension method, so it can be called directly as <c>str.IsTrimmedEmpty()</c>.</p></remarks>
            <param name="str">
              String.</param>
            <returns>
              If string is null, empty or contains only white space, <c>true</c></returns>
        </member>
        <member name="M:Serenity.StringHelper.TrimToNull(System.String)">
            <summary>
              <p>Removes whitespace characters in the left or right of the <see cref="T:System.String"/> string,
              and if resulting string is empty or null, returns null.</p></summary>
            <remarks>
              <p>Generally, when a user entered string is going to be saved to database, if user entered an
              empty string, <c>null</c> or a string of whitespaces, it is stored as <c>null</c>, otherwise
              it is expected to remove whitespace at start and end only.</p>
              <p><b>Warning:</b> "\n" (line end), "\t" (tab) and some other are also considered as whitespace). 
              To see a list see <see cref="M:System.String.Trim" /> function.</p>
              <p>This is an extension method, so it can be called directly as <c>str.TrimToNull()</c>.</p></remarks>
            <param name="str">
              String to be trimmed.</param>
            <returns>
              Trimmed string, result is null if empty.</returns>
        </member>
        <member name="M:Serenity.StringHelper.TrimToEmpty(System.String)">
            <summary>
              <p>Removes whitespace characters in the left or right of the <see cref="T:System.String"/> string,
              and if resulting string is empty or null, returns empty.</p></summary>
            <remarks>
              <p>Generally, when a user entered string is going to be saved to database, if user entered an
              empty string, <c>null</c> or a string of whitespaces, it is stored as empty string, otherwise
              it is expected to remove whitespace at start and end only.</p>
              <p><b>Warning:</b> "\n" (line end), "\t" (tab) and some other are also considered as whitespace). 
              To see a list see <see cref="M:System.String.Trim" /> function.</p>
              <p>This is an extension method, so it can be called directly as <c>str.TrimToEmpty()</c>.</p></remarks>
            <param name="str">
              String to be trimmed.</param>
            <returns>
              Trimmed string (result won't be null).</returns>
        </member>
        <member name="M:Serenity.StringHelper.IsTrimmedSame(System.String,System.String)">
            <summary>
              Compares two strings ignoring whitespace at the left or right.</summary>
            <remarks>
              <p><c>null</c> is considered to be empty.</p>
              <p><b>Warning:</b> "\n" (line end), "\t" (tab) and some other are also considered as whitespace). 
              To see a list see <see cref="M:System.String.Trim" /> function.</p>
              <p>This function can be used to compare a string entered by user to the value in the database
              for equality.</p></remarks>
            <param name="string1">
              String 1.</param>
            <param name="string2">
              String 2.</param>
            <returns>
              If two strings are same trimmed, true</returns>
        </member>
        <member name="M:Serenity.StringHelper.ThreeDots(System.String,System.Int32)">
            <summary>
              If the string's length is over a specified limit, trims its right and adds three points ("...").</summary>
            <remarks>
              This is an extension method, so it can be called directly as <c>str.ThreeDots()</c>.</remarks> 
            <param name="str">
              String.</param>
            <param name="maxLength">
              Maksimum length for the resulting string. If given as 0, or <paramref name="str"/> is shorter
              than this value, string returns as is. Otherwise <paramref name="str"/> 
              it is trimmed to be under this limit in length including "the three dots".</param>
            <returns>
              <paramref name="str"/> itself, or trimmed and three dotted string</returns>
        </member>
        <member name="M:Serenity.StringHelper.QuoteString(System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
              Quotes a string</summary>
            <param name="s">
              String</param>
            <param name="sb">
              StringBuilder</param>
            <param name="doubleQuote">
              True to use double quotes</param>
        </member>
        <member name="M:Serenity.StringHelper.ToStringDefault``1(System.Nullable{``0},System.String,System.IFormatProvider,System.String)">
            <summary>
            Formats a nullable struct
            </summary>
            <param name="source"></param>
            <param name="format">The format string 
            If <c>null</c> use the default format defined for the type of the IFormattable implementation.</param>
            <param name="provider">The format provider 
            If <c>null</c> the default provider is used</param>
            <param name="empty">The string to show when the source is <c>null</c>. 
            If <c>null</c> an empty string is returned</param>
            <returns>The formatted string or the default value if the source is <c>null</c></returns>
        </member>
        <member name="M:Serenity.StringHelper.ToStringDefault``1(``0,System.String,System.IFormatProvider,System.String)">
            <summary>
            Formats a nullable object
            </summary>
            <param name="source"></param>
            <param name="format">The format string 
            If <c>null</c> use the default format defined for the type of the IFormattable implementation.</param>
            <param name="provider">The format provider 
            If <c>null</c> the default provider is used</param>
            <param name="empty">The string to show when the source is <c>null</c>. 
            If <c>null</c> an empty string is returned</param>
            <returns>The formatted string or the default value if the source is <c>null</c></returns>
        </member>
        <member name="M:Serenity.StringHelper.Join(System.String,System.String,System.String)">
            <summary>
            Joins two strings conditionally, by putting separator between if both are non empty
            </summary>
        </member>
        <member name="T:Munq.IocContainer">
            <summary>
            The implementation of the IOC container.  Implements the IDependencyRegistrar and
            IDependencyResolver, along with the IContainerFluent and IDisposable interfaces.
            The container is thread safe.
            </summary>
        </member>
        <member name="M:Munq.IocContainer.#ctor">
            <summary>
            Initializes a new instance of the IocContainer class;
            The types IocContainer, IDependencyRegistrar, and IDependencyResolver are all registered
            to resolve to this instance of the class.
            </summary>
        </member>
        <member name="M:Munq.IocContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            Disposes of all Container scoped (ContainerLifetime) instances cached in the type registry, and
            disposes of the type registry itself.
            </remarks>
        </member>
        <member name="M:Munq.IocContainer.Dispose(System.Boolean)">
            <summary>
            Implements the Disposed(boolean disposing) method of Disposable pattern.
            </summary>
            <param name="disposing">True if disposing.</param>
        </member>
        <member name="M:Munq.IocContainer.Finalize">
            <summary>
            The finalizer just ensures the container is disposed.
            </summary>
        </member>
        <member name="T:Munq.CreateInstanceDelegateFactory">
            <summary>
            This class provides a method to build a delegate to create a specified type.  It is used
            by Register&lt;TType, TImp&gt;() to build the Func&lt;IDependencyResolver, TImp&gt; need
            to create the instance to be returned.  Also used by the Resolve methods if the type requested
            is a class, not an interface, and is not currently Registered in the container.
            </summary>
        </member>
        <member name="M:Munq.CreateInstanceDelegateFactory.Create(System.Type)">
            <summary>
            Build a delegate to return an instance of the specified type given an instance of IocContainer.
            Finds the public constructor with the most parameters.  The resulting method calls the container
            to resolve each parameter in the constructor.
            </summary>
            <param name="tImpl">The class to be resolved.</param>
            <returns>The delegate to create an instance of the class.</returns>
        </member>
        <member name="T:Munq.ILifetimeManager">
            <summary>
            Defines the functionality for Lifetime Managers.  Implementation should instantiate an 
            instance store and use the Registration's Key property to index the data in the store.
            This allows one lifetime manager to service multiple Registrations.
            </summary>
        </member>
        <member name="M:Munq.ILifetimeManager.GetInstance(Munq.IRegistration)">
            <summary>
            Get an instance for the registration, using the lifetime manager to cache instance
            as required by the scope of the lifetime manager.
            </summary>
            <param name="registration">
            The registration which is used to supply the storage key and create a new instance if
            required.
            </param>
            <returns>The cached or new instance.</returns>
        </member>
        <member name="M:Munq.ILifetimeManager.InvalidateInstanceCache(Munq.IRegistration)">
            <summary>
            Invalidate the instance in whatever storage is used by the lifetime manager.
            </summary>
            <param name="registration">
            The registration which is used to supply the storage key and create a new instance if
            required.
            </param>
        </member>
        <member name="T:Munq.IRegistration">
            <summary>
            This is the result of registering a type in the container.
            </summary>
        </member>
        <member name="P:Munq.IRegistration.Name">
            <summary>
            Gets the name of the registration.
            </summary>
        </member>
        <member name="P:Munq.IRegistration.Key">
            <summary>
            Gets the key that is used to identify cached values.
            </summary>
        </member>
        <member name="P:Munq.IRegistration.ResolvesTo">
            <summary>
            Gets the type the contain will Resolve to when this Registration is used.
            </summary>
        </member>
        <member name="M:Munq.IRegistration.WithLifetimeManager(Munq.ILifetimeManager)">
            <summary>
            Sets the lifetime manager to be used by this Registration.
            </summary>
            <param name="manager">The ILifetimeManager to use.</param>
            <returns>'this', or the Registration.</returns>
        </member>
        <member name="M:Munq.IRegistration.InvalidateInstanceCache">
            <summary>
            Invalidates any cached value so that a new instance will be created on
            the next Resolve call.
            </summary>
        </member>
        <member name="M:Munq.IRegistration.CreateInstance">
            <summary>
            Creates an instance of the type using the registered function.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="T:Munq.IRegistrationKey">
            <summary>
            This interface is used internally to identify registrations in the type registry.
            </summary>
        </member>
        <member name="M:Munq.IRegistrationKey.GetInstanceType">
            <summary>
            Gets the type that this key identifies.
            </summary>
            <returns>Returns the type of the registration.</returns>
        </member>
    </members>
</doc>
