<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Serenity.Data</name>
    </assembly>
    <members>
        <member name="T:Serenity.Data.Mapping.OriginAttribute">
            <summary>
            Specifies that this column belongs to another table.
            </summary>
        </member>
        <member name="M:Serenity.Data.Mapping.InnerJoinAttribute.#ctor(System.String)">
            <summary>
            Adds a inner join on foreign key. Use this version only on properties with ForeignKey attribute.
            </summary>
            <param name="alias">Foreign join alias</param>
        </member>
        <member name="M:Serenity.Data.Mapping.InnerJoinAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Adds a inner join
            </summary>
            <param name="alias">Join alias</param>
            <param name="toTable">Join table</param>
            <param name="onCriteria">If the attribute is used on a property, this parameter is a field name, if used on a class,
            this parameter is the ON criteria of the inner join statement.</param>
        </member>
        <member name="T:Serenity.Data.Mapping.NotMappedAttribute">
            <summary>
            Specifies that this property is not mapped to an SQL column/expression
            </summary>
        </member>
        <member name="M:Serenity.Data.Mapping.LinkingSetRelationAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Declares a linking set relation
            </summary>
            <param name="rowType">Linking row type</param>
            <param name="thisKey">Name of the field in linking row that corresponds to ID in this table</param>
            <param name="itemKey">Name of the field in linking row that will hold item values in list</param>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.Alias">
            <summary>
            The join alias in this row that brings in extension table fields as view fields
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.ThisKey">
            <summary>
            Name of the key field in this table. 
            If not specified, ID field of this table will be used.
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.OtherKey">
            <summary>
            Name of the key field in extension table. 
            If not specified, ID field of extension table is assumed,
            unless there is a field with matching name to ThisKey in extension table.
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.FilterField">
            <summary>
            Name of a field in extension table that will be filtered in 
            extension table in addition to key.
            For example, if you have a CustomerAddresses table, and
            your join condition is T0.CustomerID = ca.CustomerID and
            ca.AddressType = 'Billing', your FilterField is AddressType
            and your FilterValue is 'Billing'
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.FilterValue">
            <summary>
            Constant value of a field in extension table that will be 
            filtered in extension table in addition to key.
            For example, if you have a CustomerAddresses table, and
            your join condition is T0.CustomerID = ca.CustomerID and
            ca.AddressType = 'Billing', your FilterField is AddressType
            and your FilterValue is 'Billing'
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.PresenceField">
            <summary>
            This extension should only be inserted if this field is equal to PresenceValue
            For example, you might have a PersonType column in PersonRow and 
            student record should only be created (if not already) if PersonType = "Student".
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.PresenceValue">
            <summary>
            This extension should only be inserted if PresenceField value is equal to this one.
            For example, you might have a PersonType column in PersonRow and 
            student record should only be created (if not already) if PersonType = "Student".
            </summary>
        </member>
        <member name="P:Serenity.Data.Mapping.UpdatableExtensionAttribute.CascadeDelete">
            <summary>
            Delete extension record if this record is deleted
            </summary>
        </member>
        <member name="T:Serenity.Data.Mapping.ColumnAttribute">
            <summary>
            Explicitly specifies the database column name for property.
            Use this attribute if matching column name in database is different than the property name.
            </summary>
        </member>
        <member name="T:Serenity.Data.Mapping.ExpressionAttribute">
            <summary>
            Specifies SQL expression this property corresponds to.
            You may use brackets ([]) to escape identifiers. Brackets will be converted to database specific quotes.
            </summary>
        </member>
        <member name="M:Serenity.Data.Mapping.ExpressionAttribute.#ctor(System.String)">
            <summary>
            Specifies SQL expression this property corresponds to.
            </summary>
            <param name="value">An SQL expression like (T0.Firstname + ' ' + T0.LastName)</param>
        </member>
        <member name="T:Serenity.Data.Mapping.ForeignKeyAttribute">
            <summary>
            Specifies that this property is a foreign key to another field in a primary key table.
            There is no need for foreign key to exist in database actually. It is not checked.
            This is mostly used for joins.
            </summary>
        </member>
        <member name="M:Serenity.Data.Mapping.ForeignKeyAttribute.#ctor(System.String,System.String)">
            <summary>
            Specifies that this property is a foreign key to another field in a primary key table.
            </summary>
            <param name="table">Primary key table</param>
            <param name="field">Matching column in primary key table</param>
        </member>
        <member name="M:Serenity.Data.Mapping.ForeignKeyAttribute.#ctor(System.Type,System.String)">
            <summary>
            Specifies that this property is a foreign key to another field in a primary key table.
            </summary>
            <param name="rowType">Entity for primary key table. Row must have a [TableName] attribute.</param>
            <param name="field">If field parameter is not specified, the row type must have a field with 
            [Identity] attribute or single property with [PrimaryKey] attribute.
            (implementing IIdRow won't help)</param>
        </member>
        <member name="M:Serenity.Data.Mapping.LeftJoinAttribute.#ctor(System.String)">
            <summary>
            Adds a left join on foreign key. Use this version only on properties with ForeignKey attribute.
            </summary>
            <param name="alias">Foreign join alias</param>
        </member>
        <member name="M:Serenity.Data.Mapping.LeftJoinAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Adds a left join
            </summary>
            <param name="alias">Join alias</param>
            <param name="toTable">Join table</param>
            <param name="onCriteria">If the attribute is used on a property, this parameter is a field name, if used on a class,
            this parameter is the ON criteria of the left join statement.</param>
        </member>
        <member name="T:Serenity.Data.Mapping.SetFieldFlagsAttribute">
            <summary>
            Used to turn on (include) or turn off (exclude) field flags.
            </summary>
        </member>
        <member name="M:Serenity.Data.Mapping.SetFieldFlagsAttribute.#ctor(Serenity.Data.FieldFlags,Serenity.Data.FieldFlags)">
            <summary>
            Turn on or off field flags.
            </summary>
            <param name="add">Set of flags to turn on (include)</param>
            <param name="remove">Set of flags to turn off (exclude)</param>
        </member>
        <member name="T:Serenity.Data.DataReaderExtensions">
            <summary>
              Extension methods for IDataReader objects.</summary>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.AsDateTime(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads value at field index. Returns DbNull as Null.DateTime.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.DateTime if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.ToDateTime(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads and converts value at field index to DateTime. Returns DbNull as Null.DateTime.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.DateTime if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.AsDecimal(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads value at field index. Returns DbNull as Null.Decimal.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Decimal if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.ToDecimal(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads and converts value at field index to Decimal. Returns DbNull as Null.Decimal.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Decimal if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.AsDouble(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads value at field index. Returns DbNull as Null.Double.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Double if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.ToDouble(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads and converts value at field index to Double. Returns DbNull as Null.Double.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Double if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.AsInt32(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads value at field index. Returns DbNull as Null.Int32.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Int32 if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.ToInt32(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads and converts value at field index to Int32. Returns DbNull as Null.Int32.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Int32 if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.AsInt64(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads value at field index. Returns DbNull as Null.Int64.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Int64 if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.ToInt64(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads and converts value at field index to Int64. Returns DbNull as Null.Int64.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or Null.Int64 if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.AsString(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads value at field index. Returns DbNull as null.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or null if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.DataReaderExtensions.ToString(System.Data.IDataReader,System.Int32)">
            <summary>
              Reads and converts value at field index to String. Returns DbNull as null.</summary>
            <param name="reader">
              Reader (required).</param>
            <param name="index">
              Index.</param>
            <returns>
              Field value or null if value is DbNull.</returns>
        </member>
        <member name="M:Serenity.Data.WrappedTransaction.#ctor(Serenity.Data.WrappedConnection,System.Data.IDbTransaction)">
            <summary>
              Creates a new WrappedTransaction instance.</summary>
            <param name="wrappedConnection">Wrapped connection</param>
            <param name="actualTransaction">The actual transaction, this wrapped transaction is created for.</param>
        </member>
        <member name="P:Serenity.Data.WrappedTransaction.Connection">
            <summary>
              Returns the connection associated with this transaction.</summary>
        </member>
        <member name="P:Serenity.Data.WrappedTransaction.ActualTransaction">
            <summary>
              Returns the actual transaction.</summary>
        </member>
        <member name="P:Serenity.Data.WrappedTransaction.IsolationLevel">
            <summary>
              Returns the transaction isolation level</summary>
        </member>
        <member name="M:Serenity.Data.WrappedTransaction.Commit">
            <summary>
              Commits actual transaction and sets wrapped transaction for related connection to null.</summary>
        </member>
        <member name="M:Serenity.Data.WrappedTransaction.Rollback">
            <summary>
              Rollbacks actual transaction and sets wrapped transaction for related connection to null.</summary>
        </member>
        <member name="M:Serenity.Data.WrappedTransaction.Dispose">
            <summary>
              Rolbacks actual transaction and sets wrapped transaction for related connection to null.</summary>
        </member>
        <member name="M:Serenity.Data.SqlConnections.New(System.String,System.String)">
            <summary>
              Creates a new <see cref="T:System.Data.Common.DbConnection"/> for given connection string and provider name.</summary>
            <param name="connectionString">Connection string</param>
            <param name="providerName">Provider name</param>
            <returns>A new <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:Serenity.Data.SqlConnections.NewByKey(System.String)">
            <summary>
              Varsayılan bağlantı string'ine göre yeni bir <see cref="T:System.Data.Common.DbConnection"/> nesnesi oluşturur.</summary>
            <returns>
              Oluşturulan <see cref="T:System.Data.Common.DbConnection"/> nesnesi</returns>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_False(Serenity.Data.BaseCriteria)">
            <summary>
            Must return FALSE from this for short circuit OR (||) to return 
            a new binary criteria merging left and right operands in any case
            </summary>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.op_True(Serenity.Data.BaseCriteria)">
            <summary>
            Must ALSO return FALSE from this for short circuit AND (&amp;&amp;) to return 
            a new binary criteria merging left and right operands in any case
            https://msdn.microsoft.com/en-us/library/aa691312
            </summary>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.GetHashCode">
            <summary>
            Must override this or will get operator overload warning.
            </summary>
        </member>
        <member name="M:Serenity.Data.BaseCriteria.Equals(System.Object)">
            <summary>
            Must override this or will get operator overload warning.
            </summary>
            <param name="obj">object</param>
            <returns>True if equals to object</returns>
        </member>
        <member name="T:Serenity.Data.JsonSafeCriteriaConverter">
            <summary>
              Serialize/deserialize a BaseCriteria object and checks for safety of criteria expressions.</summary>
        </member>
        <member name="T:Serenity.Data.Criteria">
            <summary>
              An object that is used to create criterias by employing operator overloading 
              features of C# language, instead of using string based criterias.</summary>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor">
            <summary>
              Creates an empty criteria</summary>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(System.String)">
            <summary>
              Creates a new criteria with given condition. This condition is usually a 
              field name, but it can also be a criteria text pre-generated.</summary>
            <remarks>
              Usually used like: <c>new Criteria("fieldname") >= 5</c>.</remarks>
            <param name="text">
              A field name or criteria condition (can be null)</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(Serenity.Data.IField)">
            <summary>
              Creates a new criteria that contains field name of the metafield.</summary>
            <param name="field">
              Field (required).</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(System.String,System.String)">
            <summary>
              Belirtilen tablo alias'ı ve alan adını aralarına nokta koyarak içeren yeni bir 
              kriter oluşturur.</summary>
            <param name="alias">
              Tablo alias'ı. Null ya da boş olursa önemsenmez.</param>
            <param name="field">
              Alan adı (zorunlu).</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(System.Int32,System.String)">
            <summary>
              Belirtilen numerik tablo alias'ı (başına T konarak) ve alan adını aralarına 
              nokta koyarak içeren yeni bir kriter oluşturur.</summary>
            <param name="joinNumber">
              Join numarası (T1 gibi kullanılır). Değer sıfırdan küçükse alan adı tek başına
              kullanılır.</param>
            <param name="field">
              Alan adı (zorunlu).</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(Serenity.Data.IAlias,Serenity.Data.IField)">
            <summary>
              Belirtilen numerik tablo alias'ı (başına T konarak) ve alanın adını aralarına 
              nokta koyarak içeren yeni bir kriter oluşturur.</summary>
            <param name="alias">
              Join aliası (T1 gibi kullanılır)</param>
            <param name="field">
              Alan nesnesi (zorunlu).</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(Serenity.Data.IAlias,System.String)">
            <summary>
              Belirtilen numerik tablo alias'ı (başına T konarak) ve alanın adını aralarına 
              nokta koyarak içeren yeni bir kriter oluşturur.</summary>
            <param name="alias">
              Join aliası (T1 gibi kullanılır)</param>
            <param name="field">
              Alan nesnesi (zorunlu).</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(System.Int32,Serenity.Data.IField)">
            <summary>
              Belirtilen numerik tablo alias'ı (başına T konarak) ve alanın adını aralarına 
              nokta koyarak içeren yeni bir kriter oluşturur.</summary>
            <param name="joinNumber">
              Join numarası (T1 gibi kullanılır)</param>
            <param name="field">
              Alan nesnesi (zorunlu).</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(System.String,Serenity.Data.IField)">
            <summary>
              Belirtilen join ve meta alanın adını aralarına nokta koyarak içeren yeni bir 
              kriter oluşturur.</summary>
            <param name="join">
              Tablo alias bilgisini içeren LeftJoin nesnesi (zorunlu).</param>
            <param name="field">
              Field alan (zorunlu).</param>
        </member>
        <member name="M:Serenity.Data.Criteria.#ctor(Serenity.Data.ISqlQuery)">
            <summary>
              Belirtilen SqlQuery i içeren yeni bir 
              kriter oluşturur.</summary>
            <param name="query">
              Query nesnesi (genellikle sub query).</param>
        </member>
        <member name="M:Serenity.Data.Criteria.Bracket(System.String)">
            <summary>
              Verilen alan adını köşeli parantez içine alarak yeni bir kriter oluşturur.
              SQL'de boşluk içeren ya da keyword olan alan adlarının kullanılabilmesi 
              için gerekebilir.</summary>
            <param name="fieldName">
              Köşeli parantez içine alınıp kriterye çevrilecek alan adı (zorunlu).</param>
            <returns>
              Alan adını köşeli parantez içinde içeren yeni bir kriter.</returns>
        </member>
        <member name="M:Serenity.Data.Criteria.Exists(Serenity.Data.ISqlQuery)">
            <summary>
              Creates a new EXISTS criteria</summary>
            <param name="query">
              Expression</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.Criteria.Exists(System.String)">
            <summary>
              Creates a new EXISTS criteria</summary>
            <param name="expression">
              Expression</param>
            <returns></returns>
        </member>
        <member name="P:Serenity.Data.Criteria.IsEmpty">
            <summary>
              Gets if criteria is empty.</summary>
        </member>
        <member name="T:Serenity.Data.JsonCriteriaConverter">
            <summary>
              Serialize/deserialize a BaseCriteria object</summary>
        </member>
        <member name="M:Serenity.Data.JsonCriteriaConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Writes the JSON representation of the object.</summary>
            <param name="writer">
              The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">
              The value.</param>
            <param name="serializer">
              The calling serializer.</param>
        </member>
        <member name="M:Serenity.Data.JsonCriteriaConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Reads the JSON representation of the object.</summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">
              Type of the object.</param>
            <param name="existingValue">
              The existing value of object being read.</param>
            <param name="serializer">
              The calling serializer.</param>
            <returns>
              The object value.</returns>
        </member>
        <member name="M:Serenity.Data.JsonCriteriaConverter.CanConvert(System.Type)">
            <summary>
              Determines whether this instance can convert the specified object type.</summary>
            <param name="objectType">
              Type of the object.</param>
            <returns>
              True if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="P:Serenity.Data.JsonCriteriaConverter.CanRead">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="P:Serenity.Data.JsonCriteriaConverter.CanWrite">
            <summary>
              Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.</summary>
            <value>
              True if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, false.</value>
        </member>
        <member name="M:Serenity.Data.SqlQuery.#ctor">
            <summary>
            Creates a new SqlQuery instance.
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Distinct(System.Boolean)">
            <summary>
            Sets DISTINCT flag.
            </summary>
            <param name="distinct">Distinct flag.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.From(System.String)">
            <summary>
            Adds a table to the FROM statement. When it is called more than once, puts a comma
            between table names (cross join)
            </summary>
            <param name="table">Table name</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.From(System.String,Serenity.Data.IAlias)">
            <summary>
            Adds a table to the FROM statement with an alias. 
            When it is called more than once, puts a comma between table names (cross join)
            </summary>
            <param name="table">Table</param>
            <param name="alias">Alias for the table</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.From(Serenity.Data.IAlias)">
            <summary>
            Adds a table to the FROM statement, with given short name.
            </summary>
            <param name="alias">Alias that contains table name and short name.</param>
            <returns>The query itself.</returns>
            <remarks>This overload requires that alias has a table name.</remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.From(Serenity.Data.ISqlQuery,Serenity.Data.IAlias)">
            <summary>
            Adds a subquery to the FROM statement, with given short name.
            </summary>
            <param name="subQuery">A subquery</param>
            <param name="alias">Alias that contains the short name.</param>
            <returns>The query itself.</returns>
            <remarks>This overload requires that alias has a table name.</remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Serenity#Data#IGetExpressionByName#GetExpression(System.String)">
            <summary>
            Gets the source expression for a column name in the query.
            </summary>
            <param name="columnName">Column name.</param>
            <returns>Expression or null if not found.</returns>
            <remarks>This function uses a linear search in column list, so use with caution.</remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.GroupBy(System.String)">
            <summary>
            Adds a field name or an SQL expression to the GROUP BY clause.
            </summary>
            <param name="expression">Array of fields or expressions.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.GroupBy(Serenity.Data.IAlias,System.String)">
            <summary>
            Adds a field of a given table alias to the GROUP BY clause.
            </summary>
            <param name="alias">A table alias that will be prepended to the field name with "." between</param>
            <param name="fieldName">A field name of the aliased table.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Having(System.String)">
            <summary>
            Adds an SQL expression to the GROUP BY clause.
            </summary>
            <param name="expression">Array of fields or expressions.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.OrderBy(System.String,System.Boolean)">
            <summary>
            Adds a field name or an SQL expression to the ORDER BY clause.
            </summary>
            <param name="expression">A field or an SQL expression.</param>
            <param name="desc">True to add " DESC" keyword to the expression.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.OrderBy(Serenity.Data.IAlias,System.String,System.Boolean)">
            <summary>
            Adds a field of a given table alias to the ORDER BY clause.
            </summary>
            <param name="alias">A table alias that will be prepended to the field name with "." between</param>
            <param name="fieldName">A field name of the aliased table.</param>
            <param name="desc">True to add " DESC" keyword to the expression.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.OrderByFirst(System.String,System.Boolean)">
            <summary>
            Inserts a field name or an SQL expression to the start of ORDER BY clause.
            </summary>
            <param name="expression">A field or an SQL expression.</param>
            <param name="desc">True to add a " DESC" suffix.</param>
            <returns>The query itself.</returns>
            <remarks>This method is designed to help apply user defined orders 
            (for example by clicking headers on a grid) to a query with
            existing order.
            SQL server throws an error if a field is used more than once in ORDER BY
            expression, so this function first removes normal and DESC versions of 
            the expression from the ORDER BY statement.
            </remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Select(System.String)">
            <summary>
            Adds a field name or an SQL expression to the SELECT statement.
            </summary>
            <param name="expression">A field or an SQL expression.</param>
            <returns>The query itself.</returns>
            <remarks>No column name is used for the field or expression.</remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Select(Serenity.Data.IAlias,System.String)">
            <summary>
            Adds a field of a given table alias to the SELECT statement.
            </summary>
            <param name="alias">A table alias that will be prepended to the field name with "." between</param>
            <param name="fieldName">A field name of the aliased table.</param>
            <returns>The query itself.</returns>
            <remarks>No column name is used for the field or expression.</remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Select(System.String,System.String)">
            <summary>
            Adds a field name or expression to the SELECT statement with a column name
            </summary>
            <param name="expression">A field name or SQL expression.</param>
            <param name="columnName">A column name.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Select(Serenity.Data.IAlias,System.String,System.String)">
            <summary>
            Adds a field of a given table alias to the SELECT statement with a column name.
            </summary>
            <param name="alias">A table alias that will be prepended to the field name with "." between</param>
            <param name="fieldName">A field name of the aliased table.</param>
            <param name="columnName">A column name</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Select(Serenity.Data.ISqlQuery,System.String)">
            <summary>
            Adds a subquery to the SELECT statement.
            </summary>
            <param name="expression">A subquery.</param>
            <param name="columnName">A column name</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Select(Serenity.Data.ISqlQuery)">
            <summary>
            Adds a subquery to the SELECT statement.
            </summary>
            <param name="expression">A subquery.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.SelectMany(System.String[])">
            <summary>
            Adds field names or SQL expressions to the SELECT statement.
            </summary>
            <param name="expressions">Fields or SQL expressions.</param>
            <returns>The query itself.</returns>
            <remarks>No aliases are used for the fields or expressions.</remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Skip">
            <summary>
            Gets current SKIP value.
            </summary>
            <returns>SKIP value.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Skip(System.Int32)">
            <summary>
            Sets SKIP value. Used for paging.
            </summary>
            <param name="skipRows">Number of rows to skip (server dependant implementation)</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.SubQuery">
            <summary>
            Creates a new query that shares parameter dictionary with this query.
            </summary>
            <returns>
            A new query that shares parameters.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Take">
            <summary>
            Gets TAKE/TOP value.
            </summary>
            <returns>TAKE/TOP value.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Take(System.Int32)">
            <summary>
            Sets TAKE/TOP value. Used for paging.
            </summary>
            <param name="rowCount">Number of rows to take.</param>
            <returns>The query itself.</returns>
        </member>
        <member name="P:Serenity.Data.SqlQuery.Text">
            <summary>
            Gets current query text.
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Where(System.String)">
            <summary>
            Adds an expression to WHERE clause. If query already has a WHERE
            clause, inserts AND between existing one and new one.
            </summary>
            <param name="expression">An expression</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Where(System.String[])">
            <summary>
            Adds expressions to WHERE clause, inserting AND between them.
            </summary>
            <param name="expressions">An array of expressions</param>
            <returns>The query itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Serenity#Data#IFilterableQuery#Where(System.String)">
            <summary>
            Implements IDBFilterable.Where, by calling original Where method.
            </summary>
            <param name="expression">An expression</param>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Dialect(Serenity.Data.ISqlDialect)">
            <summary>
            Sets the dialect (SQL server type / version) for query.
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlQuery.CountRecords">
            <summary>
            Gets/sets the flag to get the total record count when paging is used by SKIP/TAKE. 
            A secondary query without SKIP/TAKE is generated to get total record count, 
            when this property is true.
            </summary>
        </member>
        <member name="T:Serenity.Data.SqlQuery.Column">
            <summary>
            Holds information about a column in SELECT clause.
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlQuery.Column.Expression">
            <summary>Field or expression</summary>
        </member>
        <member name="F:Serenity.Data.SqlQuery.Column.ColumnName">
            <summary>Column name</summary>
        </member>
        <member name="F:Serenity.Data.SqlQuery.Column.IntoRowIndex">
            <summary>Used by entity system when more than one entity is used as a target</summary>
        </member>
        <member name="F:Serenity.Data.SqlQuery.Column.IntoField">
            <summary>Used by entity system, to determine which field this column value will be read into</summary>
        </member>
        <member name="M:Serenity.Data.SqlQuery.Clone">
            <summary>
            Creates a clone of the query.
            </summary>
            <returns>A cloned query.</returns>
            <remarks>
            Clones states like TrackAssignments, AssignedFields etc,
            creates a copy of Params dictionary
            </remarks>
        </member>
        <member name="M:Serenity.Data.SqlQuery.FullTextSearchJoin(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
              MSSQL'de full text araması için gerekli join'i oluşturur.</summary>
            <param name="searchTable">
              Arama yapılacak alanları içeren tablo adı (zorunlu).</param>
            <param name="searchFields">
              Arama yapılacak alanlar (zorunlu).</param>
            <param name="searchQuery">
              Aranan kelime, ya da kelime grubu (zorunlu). Kelimeler virgülle ayrılmalı.</param>
            <param name="searchTableAlias">
              Arama yapılacak tabloya, sorgunun FROM kısmında atanmış olan alias (zorunlu, ör. T0).</param>
            <param name="searchTableKey">
              Arama yapılacak tablonun anahtar (ID) sahası (zorunlu).</param>
            <param name="containsAlias">
              Bağlama yapılan contains table'a atanacak alias (zorunlu, ör. CT).</param>
            <returns>
              SqlSelect nesnesinin kendisi.</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.ToString">
            <summary>
              SqlSelect sorgusunu formatlayıp bir SELECT sorgusuna çevirir. Sayfalama sözkonusuysa 
              (atlanan kayıt varsa) birden fazla sorgu arka arkaya oluşturulur.</summary>
            <returns>
              Formatlanmış SELECT ifadesi</returns>
        </member>
        <member name="M:Serenity.Data.SqlQuery.AppendFromWhereOrderByGroupByHaving(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
              Verilen StringBuilder nesnesine SqlSelect'in FROM, WHERE, ORDER BY, GROUP BY, HAVING
              kısımlarını, belirtilirse bir ek filtre de gözönüne alınarak ekler.</summary>
            <param name="sb">
              SqlSelect nesnesinin mevcut from, where... kısımlarının formatlanıp ekleneceği
              StringBuilder nesnesi.</param>
            <param name="extraWhere">
              Belirtilirse WHERE koşullarına AND'lenerek eklenecek ekstra filtre.</param>
            <param name="includeOrderBy">
              Sonuçta ORDER BY kısmı bulunsun mu?</param>
            <remarks>
              Sayfalama için üretilen sorgularda SqlSelect'in bu kısımları iki ayrı yerde (birinde ek bir 
              koşulla birlikte) kullanıldığından, bu şekilde yapılarak, kod tekrarının önüne 
              geçilmiştir.</remarks>
        </member>
        <member name="T:Serenity.Data.IAlias">
            <summary>
              Interface for aliases.</summary>
        </member>
        <member name="T:Serenity.Data.FieldFlags">
            <summary>Flags that determine basic properties of a field</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.None">
            <summary>No flags set.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Internal">
            <summary>Internal fields are equal to no flags set.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Insertable">
            <summary>Can a value be set on INSERT? Server side calculated 
            fields (like identity) shouldn't have this flag.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Updatable">
            <summary>Can it be set on UPDATE? Server side calculated 
            fields (like identity) shouldn't have this flag.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.NotNull">
            <summary>Can it have a null or empty value?</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.PrimaryKey">
            <summary>Field is a member of primary key.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.AutoIncrement">
            <summary>Auto incrementing field.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Foreign">
            <summary>It is a field originating from another table 
            through a join. e.g. view field.</summary> 
        </member>
        <member name="F:Serenity.Data.FieldFlags.Calculated">
            <summary>Calculated field.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Reflective">
            <summary>Just reflects another field value (e.g. negative/absolute 
            version of it), so doesn't have client and server side storage of 
            its own, and setting it just sets another field.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.ClientSide">
            <summary>
            Field which is just a container to use in client side code (might 
            also be client side calculated / reflective).</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.NotMapped">
            <summary>
            Property which is not mapped to a SQL field / expression.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Trim">
            <summary>Should be trimmed (empty string as null) before 
            setting its value.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.TrimToEmpty">
            <summary>Should be trimmed to (null to empty string) before 
            setting its value.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.DenyFiltering">
            <summary>Deny filtering on this field.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Unique">
            <summary>Values should be unique.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Default">
            <summary>These are default flags unless specified otherwise. 
            Insertable, updatable and nullable and trimmed (to null).</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Required">
            <summary>Default flags with NotNull included.</summary>
        </member>
        <member name="F:Serenity.Data.FieldFlags.Identity">
            <summary>An identity primary key field with auto incrementing value.</summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.Auto">
            <summary>
            Auto is equivalent to List level for table fields and Details level for view fields.
            </summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.Always">
            <summary>
            Always select this field, even if it is in ExcludeColumns list
            </summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.Lookup">
            <summary>
            Obsolete. Use [LookupInclude] attribute.
            </summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.List">
            <summary>
            Select this field in ColumnSelection.List or ColumnSelection.Details modes,
            or if it's specified in IncludeColumns list (if not also in 
            ExcludeColumns list)
            </summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.Details">
            <summary>
            Select this field in ColumnSelection.Details mode or if it's specified in 
            IncludeColumns list (if not also in ExcludeColumns list)
            </summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.Explicit">
            <summary>
            Don't select this field in any mode. Select it if specified in 
            IncludeColumns list (if not also in ExcludeColumns list)
            </summary>
        </member>
        <member name="F:Serenity.Data.SelectLevel.Never">
            <summary>
            Never select this column. Use this for sensitive fields like password hash.
            </summary>
        </member>
        <member name="T:Serenity.Data.FilterableQueryExtensions">
            <summary>
              Extensions for objects implementing IDbWhere interface.</summary>
        </member>
        <member name="M:Serenity.Data.FilterableQueryExtensions.Where``1(``0,Serenity.ICriteria)">
            <summary>
              Adds a filter to query</summary>
            <typeparam name="T">
              Query class</typeparam>
            <param name="self">
              Query</param>
            <param name="filter">
              Filter</param>
            <returns>
              Query itself.</returns>
        </member>
        <member name="M:Serenity.Data.FilterableQueryExtensions.WhereEqual``1(``0,Serenity.Data.IField,System.Object)">
            <summary>
              Adds a where statement with equality filter to a query, and sets the parameter value with a parameter.</summary>
            <param field="field">
              Field.</param>
            <param field="value">
              Parameter value</param>
            <returns>
              The new filter parameter.</returns>
        </member>
        <member name="T:Serenity.Data.QueryWithParamsExtensions">
            <summary>
              Extension methods for classes implementing IDbWhereParam interface.</summary>
        </member>
        <member name="T:Serenity.Data.SetFieldByStatementExtensions">
            <summary>
              Extension methods for classes implementing IDbSet interface</summary>
        </member>
        <member name="M:Serenity.Data.SetFieldByStatementExtensions.Set``1(``0,System.String,System.Object)">
            <summary>
              Sets a field value with a parameter.</summary>
            <param field="field">
              Field name.</param>
            <param field="param">
              Parameter name</param>
            <param field="value">
              Parameter value</param>
            <returns>
              Object itself.</returns>
        </member>
        <member name="P:Serenity.Data.IField.Name">
            <summary>
            Column name</summary>
        </member>
        <member name="P:Serenity.Data.IField.Expression">
            <summary>
            The expression (can be equal to name if no expression)</summary>
        </member>
        <member name="P:Serenity.Data.IField.ColumnAlias">
            <summary>
            Select as column alias. Can be equal to property name or name.</summary>
        </member>
        <member name="P:Serenity.Data.IHaveJoins.Joins">
            <summary>
            List of all joins in entity</summary>
        </member>
        <member name="M:Serenity.Data.QueryWithParams.CreateSubQuery``1">
            <summary>
            Creates a new query that shares parameter dictionary with this query.
            </summary>
            <returns>
            A new query that shares parameters.</returns>
        </member>
        <member name="M:Serenity.Data.QueryWithParams.Dialect">
            <summary>
            Gets the dialect (SQL server type / version) for query.
            </summary>
        </member>
        <member name="T:Serenity.Data.SqlMapper">
            <summary>
            Dapper, a light weight object mapper for ADO.NET
            </summary>
        </member>
        <member name="T:Serenity.Data.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,Serenity.Data.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:Serenity.Data.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="T:Serenity.Data.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type memebers
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:Serenity.Data.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Serenity.Data.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Serenity.Data.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="E:Serenity.Data.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache 
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GetCachedSQLCount">
            <summary>
            Return a count of all the cached queries by dapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GetCachedSQL(System.Int32)">
            <summary>
            Return a list of all the queries cached by dapper
            </summary>
            <param name="ignoreHitCountAbove"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GetHashCollissions">
            <summary>
            Deep diagnostics only: find any hash collisions in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configire the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="T:Serenity.Data.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensability
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Identity.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.commandType">
            <summary>
            The command type 
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.gridIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.connectionString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Serenity.Data.SqlMapper.Identity.parametersType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Identity.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Identity.Equals(Serenity.Data.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``1(System.Data.IDbConnection,Serenity.Data.ISqlQuery,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.QueryInternal``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a typed list of objects, reader is closed after the call
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the recordset</typeparam>
            <typeparam name="TSecond">The second type in the recordset</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.Query``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TSeventh"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.CreateParamInfoGenerator(Serenity.Data.SqlMapper.Identity,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.SetTypeMap(System.Type,Serenity.Data.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader)">
            <summary>
            Throws a data exception, only used internally
            </summary>
            <param name="ex"></param>
            <param name="index"></param>
            <param name="reader"></param>
        </member>
        <member name="P:Serenity.Data.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share startegies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="T:Serenity.Data.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query 
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single recordset on the grid
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single recordset on the grid
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Read``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="T:Serenity.Data.DynamicParameters">
            <summary>
            A bag of parameters that can be passed to the Dapper Query and Execute methods
            </summary>
        </member>
        <member name="M:Serenity.Data.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:Serenity.Data.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:Serenity.Data.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Serenity.Data.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dbType"></param>
            <param name="direction"></param>
            <param name="size"></param>
        </member>
        <member name="M:Serenity.Data.DynamicParameters.AddParameters(System.Data.IDbCommand,Serenity.Data.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="P:Serenity.Data.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="M:Serenity.Data.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="T:Serenity.Data.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="M:Serenity.Data.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="P:Serenity.Data.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:Serenity.Data.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:Serenity.Data.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:Serenity.Data.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="M:Serenity.Data.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="T:Serenity.Data.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="F:Serenity.Data.FeatureSupport.FeatureList">
            <summary>
            Dictionary of supported features index by connection type name
            </summary>
        </member>
        <member name="M:Serenity.Data.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the featureset based on the passed connection
            </summary>
        </member>
        <member name="P:Serenity.Data.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:Serenity.Data.SimpleMemberMap">
            <summary>
            Represents simple memeber map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:Serenity.Data.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:Serenity.Data.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:Serenity.Data.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:Serenity.Data.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:Serenity.Data.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:Serenity.Data.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Serenity.Data.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Serenity.Data.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Serenity.Data.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:Serenity.Data.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:Serenity.Data.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Serenity.Data.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Serenity.Data.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:Serenity.Data.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="M:Serenity.Data.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:Serenity.Data.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:Serenity.Data.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not impelmeneted as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Serenity.Data.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="M:Serenity.Data.Sql.Sum(System.String)">
            <summary>
              Verilen alanı SUM(..) içerisine alır.</summary>
            <param name="field">
              SUM(...) içerisine yazılacak alan adı (zorunlu).</param>
            <returns>
              "SUM(field)"</returns>
        </member>
        <member name="M:Serenity.Data.Sql.Count(System.String)">
            <summary>
              Verilen alanı COUNT(..) içerisine alır.</summary>
            <param name="field">
              COUNT(...) içerisine alınacak alan adı (zorunlu).</param>
            <returns>
              "COUNT(field)".</returns>
        </member>
        <member name="M:Serenity.Data.Sql.Count(System.Int32,System.String)">
            <summary>
              Verilen alanı başına join indeksini getirerek COUNT(..) içerisine alır.</summary>
            <param name="joinNumber">
              Alanın bağlı olduğu join indeksi.</param>
            <param name="field">
              COUNT(...) içerisine alınacak alan adı.</param>
            <returns>
              "COUNT(T5.field)".</returns>
        </member>
        <member name="M:Serenity.Data.Sql.Count">
            <summary>
              SQL'de sıkça kullanılan COUNT(*) sabitini verir.</summary>
            <returns>
              "COUNT(*)"</returns>
        </member>
        <member name="M:Serenity.Data.Sql.Coalesce(System.String[])">
            <summary>
              Verilen alanı COALESCE(..) içerisine alır.</summary>
            <param name="statements">
              COALESCE(...) içerisine alınacak alan adları (zorunlu).</param>
            <returns>
              "COALESCE(field)".</returns>
        </member>
        <member name="M:Serenity.Data.Sql.Min(System.String)">
            <summary>
              Verilen alanı MIN(..) içerisine alır.</summary>
            <param name="field">
              MIN(...) içerisine yazılacak alan adı (zorunlu).</param>
            <returns>
              MIN(field)</returns>
        </member>
        <member name="M:Serenity.Data.Sql.Min(System.Int32,System.String)">
            <summary>
              Verilen alanı başına join indeksini getirerek MIN(..) içerisine alır.</summary>
            <param name="joinNumber">
              Alanın bağlı olduğu join indeksi.</param>
            <param name="field">
              MIN(...) içerisine alınacak alan adı (zorunlu).</param>
            <returns>
              "MIN(T5.field)".</returns>
        </member>
        <member name="M:Serenity.Data.Sql.Max(System.String)">
            <summary>
              Verilen alanı MAX(..) içerisine alır.</summary>
            <param name="field">
              MAX(...) içerisine yazılacak alan adı (zorunlu).</param>
            <returns>
              MAX(T5.field)</returns>
        </member>
        <member name="M:Serenity.Data.Sql.Max(System.Int32,System.String)">
            <summary>
              Verilen alanı başına join indeksini getirerek MAX(..) içerisine alır.</summary>
            <param name="joinNumber">
              Alanın bağlı olduğu join indeksi.</param>
            <param name="field">
              MAX(...) içerisine alınacak alan adı (zorunlu).</param>
            <returns>
              "MAX(T5.field)".</returns>      
        </member>
        <member name="M:Serenity.Data.Sql.Sum(System.Int32,System.String)">
            <summary>
              Verilen alanı başına join indeksini getirerek SUM(..) içerisine alır.</summary>
            <param name="joinNumber">
              Alanın bağlı olduğu join indeksi.</param>
            <param name="field">
              SUM(...) içerisine alınacak alan adı (zorunlu).</param>
            <returns>
              "SUM(T5.field)".</returns>      
        </member>
        <member name="M:Serenity.Data.Sql.Avg(System.String)">
            <summary>
              Verilen alanı AVG(..) içerisine alır.</summary>
            <param name="field">
              AVG(...) içerisine yazılacak alan adı (zorunlu).</param>
            <returns>
              "AVG(field)"</returns>
        </member>
        <member name="M:Serenity.Data.Sql.Avg(System.Int32,System.String)">
            <summary>
              Verilen alanı başına join indeksini getirerek AVG(..) içerisine alır.</summary>
            <param name="joinNumber">
              Alanın bağlı olduğu join indeksi.</param>
            <param name="field">
              AVG(...) içerisine alınacak alan adı (zorunlu).</param>
            <returns>
              "AVG(T5.field)".</returns>      
        </member>
        <member name="M:Serenity.Data.Sql.Case(System.String,System.String[],System.String)">
            <summary>
            Builds a CASE statement.
            </summary>
            <param name="condition">Optional condition. For example for statement "CASE Field1 WHEN 1 THEN 2 END", condition would be "Field1"</param>
            <param name="whenThenPairs">Pairs of WHEN/THEN statements like ["A = 1", "'Result1'", "A = 2", "'Result2'"] for a case
            statement like CASE WHEN A = 1 THEN 'Result1' WHEN A = 2 THEN 'Result2' END.</param>
            <param name="elseStatement">Optional ELSE statement</param>
            <returns></returns>
        </member>
        <member name="T:Serenity.Data.SqlDelete">
            <summary>
              Class to generate queries of form <c>DELETE FROM tablename WHERE [conditions]</c>.</summary>
        </member>
        <member name="M:Serenity.Data.SqlDelete.#ctor(System.String)">
            <summary>
              Creates a new SqlDelete query.</summary>
            <param name="tableName">
              Table to delete records from (required).</param>
        </member>
        <member name="M:Serenity.Data.SqlDelete.Where(System.String)">
            <summary>
              Adds a new condition to the WHERE part of the query with an "AND" between.</summary>
            <param name="condition">
              Condition.</param>
            <returns>
              SqlDelete object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlDelete.Serenity#Data#IFilterableQuery#Where(System.String)">
            <summary>
              Adds a new condition to the WHERE part of the query with an "AND" between.</summary>
            <param name="condition">
              Condition.</param>
            <returns>
              SqlDelete object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlDelete.Where(System.String[])">
            <summary>
              Adds new conditions to the WHERE part of the query with an "AND" between.</summary>
            <param name="conditions">
              Conditions.</param>
            <returns>
              SqlDelete object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlDelete.ToString">
            <summary>
              Gets string representation of the query.</summary>
            <returns>
              String representation of the query.</returns>
        </member>
        <member name="M:Serenity.Data.SqlDelete.Format(System.String,System.String)">
            <summary>
              Formats a DELETE query.</summary>
            <param name="tableName">
              Tablename.</param>
            <param name="where">
              Where part of the query.</param>
            <returns>
              Formatted query.</returns>
        </member>
        <member name="T:Serenity.Data.SqlInsert">
            <summary>
              Class to generate queries of the form <c>INSERT INTO tablename (field1, field2..fieldN) 
              VALUES (value1, value2..valueN)</c></summary>
        </member>
        <member name="M:Serenity.Data.SqlInsert.#ctor(System.String)">
            <summary>
              Creates a new SqlInsert query.</summary>
            <param name="tableName">
              Table to insert record (required).</param>
        </member>
        <member name="M:Serenity.Data.SqlInsert.SetTo(System.String,System.String)">
            <summary>
              Sets field value.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Field value (expression, required).</param>
            <returns>
              SqlInsert object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.Serenity#Data#ISetFieldByStatement#SetTo(System.String,System.String)">
            <summary>
              Sets field value.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Field value (expression, required).</param>
            <returns>
              SqlInsert object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.SetTo(Serenity.Data.IField,System.String)">
            <summary>
              Sets field value.</summary>
            <param name="field">
              Field (required).</param>
            <param name="value">
              Field value (expression, required).</param>
            <returns>
              SqlInsert object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.SetNull(System.String)">
            <summary>
              Assigns NULL as the field value.</summary>
            <param name="field">
              Field (required).</param>
            <returns>
              SqlInsert object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.Clone">
            <summary>Clones the query.</summary>
            <returns>Clone.</returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.Dialect(Serenity.Data.ISqlDialect)">
            <summary>
            Sets the dialect (SQL server type / version) for query.
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlInsert.ToString">
            <summary>
              Gets string representation of the query.</summary>
            <returns>
              String representation.</returns>
        </member>
        <member name="M:Serenity.Data.SqlInsert.Format(System.String,System.Collections.Generic.List{System.String})">
            <summary>
              Formats an INSERT query.</summary>
            <param name="tableName">
              Tablename (required).</param>
            <param name="nameValuePairs">
              Field names and values. Must be passed in the order of <c>[field1, value1, field2, 
              value2, ...., fieldN, valueN]</c>. It must have even number of elements.</param>
            <returns>
              Formatted query.</returns>
        </member>
        <member name="T:Serenity.Data.SqlUpdate">
            <summary>
              Generates queries of the form <c>UPDATE tablename SET field1 = value1, field2 = value2 ... fieldN = valueN WHERE [filter]</c>.</summary>
            <remarks>
              <p>To determine updated field values, Set(field, value) should be called several times.</p>
              <p>Where expressions determines the record(s) to update.</p></remarks>   
        </member>
        <member name="M:Serenity.Data.SqlUpdate.#ctor(System.String)">
            <summary>
              Creates a new SqlUpdate query.</summary>
            <param name="tableName">
              Tablename (required).</param>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.SetTo(System.String,System.String)">
            <summary>
              Sets field value to the expression.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Field value (expression, required).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Serenity#Data#ISetFieldByStatement#SetTo(System.String,System.String)">
            <summary>
              Sets field value to the expression.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Field value (expression, required).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.SetTo(Serenity.Data.IField,System.String)">
            <summary>
              Sets field value to the expression.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Field expression (required).</param>
            <returns>
              SqlInsert object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.SetNull(System.String)">
            <summary>
              Sets field value to NULL.</summary>
            <param name="field">
              Field (required).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Inc(System.String,System.Int32)">
            <summary>
              Increases a fields value.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Increase amount (can be negative).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Inc(Serenity.Data.IField,System.Int32)">
            <summary>
              Increases a fields value.</summary>
            <param name="field">
              Field (required).</param>
            <param name="value">
              Increase amount (can be negative).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Dec(System.String,System.Int32)">
            <summary>
              Decreases a fields value.</summary>
            <param name="field">
              Field name (required).</param>
            <param name="value">
              Decrease amount (can be negative).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Dec(Serenity.Data.IField,System.Int32)">
            <summary>
              Decreases a fields value.</summary>
            <param name="field">
              Field (required).</param>
            <param name="value">
              Decrease amount (can be negative).</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Where(System.String)">
            <summary>
              Adds a condition to WHERE clause of the query.</summary>
            <param name="condition">
              Condition.</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Dialect(Serenity.Data.ISqlDialect)">
            <summary>
            Sets the dialect (SQL server type / version) for query.
            </summary>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Serenity#Data#IFilterableQuery#Where(System.String)">
            <summary>
              Adds a condition to WHERE clause of the query.</summary>
            <param name="condition">
              Condition.</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Where(System.String[])">
            <summary>
              Adds conditions to WHERE clause of the query.</summary>
            <param name="conditions">
              Condition.</param>
            <returns>
              SqlUpdate object itself.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Clone">
            <summary>
              Clones this SqlUpdate query.</summary>
            <returns>
              A new clone.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.ToString">
            <summary>
              Gets string representation of SqlUpdate query.</summary>
            <returns>
              String representation.</returns>
        </member>
        <member name="M:Serenity.Data.SqlUpdate.Format(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
              Formats an SQL UPDATE statement.</summary>
            <param name="tableName">
              Tablename (required).</param>
            <param name="nameValuePairs">
              Field name and values. Should have structure of <c>[field1, value1, field2, value2, ...., fieldN, valueN]</c>.
              This array is required and must have even number of elements.</param>
            <param name="where">
              WHERE clause (can be null).</param>
            <returns>
              Formatted UPDATE query.</returns>
        </member>
        <member name="T:Serenity.Data.SqlCommandDumper">
            <summary>
            http://stackoverflow.com/questions/265192/get-the-generated-sql-statement-from-a-sqlcommand-object (answer by Mitch)
            </summary>
        </member>
        <member name="T:Serenity.Data.Alias">
            <summary>
              Used to define aliases like (T0).</summary>
        </member>
        <member name="T:Serenity.Data.IFilterableQuery">
            <summary>
              Interface for query classes (e.g. SqlSelect, SqlUpdate) having a where method to filter
              records</summary>
        </member>
        <member name="M:Serenity.Data.IFilterableQuery.Where(System.String)">
            <summary>
              Filters a query by a filter string.</summary>
            <param name="filter">
              Filter string.</param>
            <returns>
              Object itself.</returns>
        </member>
        <member name="T:Serenity.Data.IGetExpressionByName">
            <summary>
              Interface for query classes (e.g. SqlQuery) that can return expression given column name
            </summary>
        </member>
        <member name="T:Serenity.Data.IQueryWithParams">
            <summary>
              Interface for objects setting parameters by PARAM method (like SqlInsert, SqlUpdate, SqlDelete...)</summary>
        </member>
        <member name="T:Serenity.Data.ISetFieldByStatement">
            <summary>
              Interface for objects setting values by SetTo method (like SqlInsert, SqlUpdate...)</summary>
        </member>
        <member name="M:Serenity.Data.ISetFieldByStatement.SetTo(System.String,System.String)">
            <summary>
              Sets a field to given value identifier.</summary>
            <param name="name">
              Field name (required).</param>
            <param name="statement">
              Value identifier (e.g. param name).</param>
            <returns>
              Query itself.</returns>
        </member>
        <member name="T:Serenity.Data.Join">
            <summary>
              SQL sorgusundaki bir JOIN ifadesine karşılık gelir (INNER, OUTER, CROSS vs.)</summary>
        </member>
        <member name="P:Serenity.Data.Join.OnCriteria">
            <summary>
              Left outer join'in "ON(...)" kısmında yazılan ifadeyi verir.</summary>
        </member>
        <member name="P:Serenity.Data.Join.ReferencedAliases">
            <summary>
              Left outer join'in "ON(...)" kısmında yazılan ifadedeki alias ların listesini verir.</summary>
        </member>
        <member name="T:Serenity.Data.ReaderCallBack">
            <summary>
              <see cref="T:System.Data.IDataReader"/> parametresi alan ve sonuç döndürmeyen bir delegate tipi</summary>
            <param name="reader">
              Callback fonksiyonuna geçirilen <see cref="T:System.Data.IDataReader"/> tipinde nesne.</param>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteAndGetID(Serenity.Data.SqlInsert,System.Data.IDbConnection)">
            <summary>
              <see cref="T:Serenity.Data.SqlInsert"/> nesnesinin içerdiği sorguyu bağlantı üzerinde çalıştırır ve
              istenirse eklenen kaydın IDENTITY alanının değerini döndürür.</summary>
            <remarks>
              <p>Bu bir extension metodu olduğundan direk query.Execute(connection, true) şeklinde de 
              çalıştırılabilir.</p></remarks>
            <param name="query">
              Sorguyu içeren <see cref="T:Serenity.Data.SqlInsert"/> nesnesi.</param>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı. Gerekirse otomatik olarak açılır.</param>
            <returns>
              Identity value of inserted record.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.Execute(Serenity.Data.SqlInsert,System.Data.IDbConnection)">
            <summary>
              <see cref="T:Serenity.Data.SqlInsert"/> nesnesinin içerdiği sorguyu bağlantı üzerinde çalıştırır</summary>
            <remarks>
              <p>Bu bir extension metodu olduğundan direk query.Execute(connection) şeklinde de 
              çalıştırılabilir.</p></remarks>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı. Gerekirse otomatik olarak açılır.</param>
            <param name="query">
              Sorguyu içeren <see cref="T:Serenity.Data.SqlInsert"/> nesnesi.</param>
        </member>
        <member name="M:Serenity.Data.SqlHelper.Execute(Serenity.Data.SqlInsert,System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
              <see cref="T:Serenity.Data.SqlInsert"/> nesnesinin içerdiği sorguyu bağlantı üzerinde çalıştırır</summary>
            <remarks>
              <p>Bu bir extension metodu olduğundan direk query.Execute(connection) şeklinde de 
              çalıştırılabilir.</p></remarks>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı. Gerekirse otomatik olarak açılır.</param>
            <param name="query">
              Sorguyu içeren <see cref="T:Serenity.Data.SqlInsert"/> nesnesi.</param>
            <param name="param">Parameter dictionary</param>
        </member>
        <member name="M:Serenity.Data.SqlHelper.Execute(Serenity.Data.SqlUpdate,System.Data.IDbConnection,Serenity.Data.ExpectedRows)">
            <summary>
              <see cref="T:Serenity.Data.SqlUpdate"/> nesnesinin içerdiği sorguyu bağlantı üzerinde çalıştırır.</summary>
            <remarks>
              <p>Bu bir extension metodu olduğundan direk query.Execute(connection) şeklinde de 
              çalıştırılabilir.</p></remarks>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı. Gerekirse otomatik olarak açılır.</param>
            <param name="query">
              Sorguyu içeren <see cref="T:Serenity.Data.SqlUpdate"/> nesnesi.</param>
            <param name="expectedRows">Expected number of rows to be updated (defaults to one)</param>
            <returns>
              Etkilenen kayıt sayısı.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.Execute(Serenity.Data.SqlDelete,System.Data.IDbConnection,Serenity.Data.ExpectedRows)">
            <summary>
              <see cref="T:Serenity.Data.SqlDelete"/> nesnesinin içerdiği sorguyu bağlantı üzerinde çalıştırır.</summary>
            <remarks>
              <p>Bu bir extension metodu olduğundan direk query.Execute(connection) şeklinde de 
              çalıştırılabilir.</p></remarks>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı. Gerekirse otomatik olarak açılır.</param>
            <param name="query">
              Sorguyu içeren <see cref="T:Serenity.Data.SqlDelete"/> nesnesi.</param>
            <param name="expectedRows">Expected number of rows to be deleted (defaults to one)</param>
            <returns>
              Etkilenen kayıt sayısı.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.Execute(Serenity.Data.SqlDelete,System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object},Serenity.Data.ExpectedRows)">
            <summary>
              <see cref="T:Serenity.Data.SqlDelete"/> nesnesinin içerdiği sorguyu bağlantı üzerinde çalıştırır.</summary>
            <remarks>
              <p>Bu bir extension metodu olduğundan direk query.Execute(connection) şeklinde de 
              çalıştırılabilir.</p></remarks>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı. Gerekirse otomatik olarak açılır.</param>
            <param name="query">
              Sorguyu içeren <see cref="T:Serenity.Data.SqlDelete"/> nesnesi.</param>
            <param name="expectedRows">Expected number of rows to be deleted (defaults to one)</param>
            <param name="param">Parameters dictionary</param>
            <returns>
              Etkilenen kayıt sayısı.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteReader(Serenity.Data.SqlQuery,System.Data.IDbConnection)">
            <summary>
              <see cref="T:Serenity.Data.SqlQuery"/> nesnesinin içerdiği sorguyu bağlantı üzerinde çalıştırır.</summary>
            <remarks>
              <p>Bu bir extension metodu olduğundan direk query.Execute(connection) şeklinde de 
              çalıştırılabilir.</p></remarks>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı. Gerekirse otomatik olarak açılır.</param>
            <param name="query">
              Sorguyu içeren <see cref="T:Serenity.Data.SqlQuery"/> nesnesi.</param>
            <returns>
              Sorgu sonuçlarına erişim sağlayan <see cref="T:System.Data.IDataReader"/> nesnesi.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteReader(Serenity.Data.SqlQuery,System.Data.IDbConnection,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
              <see cref="T:Serenity.Data.SqlQuery"/> nesnesinin içerdiği sorguyu bağlantı üzerinde çalıştırır.</summary>
            <remarks>
              <p>Bu bir extension metodu olduğundan direk query.Execute(connection) şeklinde de 
              çalıştırılabilir.</p>
            </remarks>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı. Gerekirse otomatik olarak açılır.</param>
            <param name="query">
              Sorguyu içeren <see cref="T:Serenity.Data.SqlQuery"/> nesnesi.</param>
            <param name="param">Parameter dictionary</param>
            <returns>
              Sorgu sonuçlarına erişim sağlayan <see cref="T:System.Data.IDataReader"/> nesnesi.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.NewCommand(System.Data.IDbConnection,System.String)">
            <summary>
              İstenen bağlantıya bağlı ve verilen komutu içeren yeni bir IDbCommand nesnesi oluşturur.</summary>
            <param name="connection">
              IDbCommand nesnesinin oluşturulacağı bağlantı.</param>
            <param name="commandText">
              IDbCommand nesnesinin içereceği komut metni. <c>null</c> olabilir.</param>
            <returns>
              Yeni IDbCommand nesnesi.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.NewCommand(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
              İstenen bağlantıya bağlı ve verilen komutu içeren yeni bir IDbCommand nesnesi oluşturur.</summary>
            <param name="connection">
              IDbCommand nesnesinin oluşturulacağı bağlantı.</param>
            <param name="commandText">
              IDbCommand nesnesinin içereceği komut metni. <c>null</c> olabilir.</param>
            <param name="param">
              Parameters.</param>
            <returns>
              Yeni IDbCommand nesnesi.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.AddParamWithValue(System.Data.Common.DbCommand,System.String,System.Object,Serenity.Data.ISqlDialect)">
            <summary>
              <see cref="T:System.Data.Common.DbCommand"/> nesnesine belirtilen isim ve değere sahip yeni bir parametre ekler.</summary>
            <param name="command">
              Parametrenin ekleneceği <see cref="T:System.Data.Common.DbCommand"/> nesnesi</param>
            <param name="name">
              Parametre ismi.</param>
            <param name="value">
              Parametre değeri.</param>
            <param name="dialect">SQL dialect</param>
            <returns>
              Yeni oluşturulan <see cref="T:System.Data.Common.DbParameter"/> nesnesi.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.CheckConnectionPoolException(System.Data.IDbConnection,System.Exception)">
            <summary>
              Verilen Sql exception'ının numarasının, bilinen connection pool hatalarından biri olmasını 
              denetler ve gerekirse bağlantıyı tekrar açıp kapatır.</summary>
            <param name="connection">
              Hatanın oluştuğu bağlantı.</param>
            <param name="exception">
              Numarası kontrol edilecek hata.</param>
            <returns>
              Hata numarası 10054 ise true.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
              Bağlantı üzerinde sonuç döndürmeyen (INSERT, UPDATE, DELETE gibi) bir sorguyu çalıştırır.</summary>
            <param name="command">
              Çalıştırılacak komut.</param>
            <returns>
              Etkilenen satır sayısı (veritabanının desteklemesine bağlı).</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
              Bağlantı üzerinde sonuç döndürmeyen (INSERT, UPDATE, DELETE gibi) bir sorguyu çalıştırır.</summary>
            <param name="connection">
              Komutun çalıştırılacağı bağlantı.</param>
            <param name="commandText">
              Çalıştırılacak komut.</param>
            <param name="param">
              Parameters (optional).</param>
            <returns>
              Etkilenen satır sayısı (veritabanının desteklemesine bağlı).</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteNonQuery(System.Data.IDbConnection,System.String)">
            <summary>
              Bağlantı üzerinde sonuç döndürmeyen (INSERT, UPDATE, DELETE gibi) bir sorguyu çalıştırır.</summary>
            <param name="connection">
              Komutun çalıştırılacağı bağlantı.</param>
            <param name="commandText">
              Çalıştırılacak komut.</param>
            <returns>
              Etkilenen satır sayısı (veritabanının desteklemesine bağlı).</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
              Bağlantı üzerinde tek değer döndüren bir sorguyu çalıştırır.</summary>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı.</param>
            <param name="commandText">
              Çalıştırılacak sorgu.</param>
            <param name="param">
              Parameters (optional).</param>
            <returns>
              Sorgunun döndürdüğü skalar değer.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteScalar(System.Data.IDbConnection,System.String)">
            <summary>
              Bağlantı üzerinde tek değer döndüren bir sorguyu çalıştırır.</summary>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı.</param>
            <param name="commandText">
              Çalıştırılacak sorgu.</param>
            <returns>
              Sorgunun döndürdüğü skalar değer.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteScalar(System.Data.IDbConnection,Serenity.Data.SqlQuery)">
            <summary>
              Bağlantı üzerinde tek değer döndüren bir <see cref="T:Serenity.Data.SqlQuery"/> sorgusunu çalıştırır.</summary>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı.</param>
            <param name="selectQuery">
              Çalıştırılacak sorguyu içeren <see cref="T:Serenity.Data.SqlQuery"/> nesnesi.</param>
            <returns>
              Sorgunun döndürdüğü skalar değer.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteScalar(System.Data.IDbConnection,Serenity.Data.SqlQuery,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
              Bağlantı üzerinde tek değer döndüren bir <see cref="T:Serenity.Data.SqlQuery"/> sorgusunu çalıştırır.</summary>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı.</param>
            <param name="selectQuery">
              Çalıştırılacak sorguyu içeren <see cref="T:Serenity.Data.SqlQuery"/> nesnesi.</param>
            <param name="param">Parameter dictionary</param>
            <returns>
              Sorgunun döndürdüğü skalar değer.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteReader(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
              Sorguyu belirtilen bağlantı üzerinde çalıştırır ve bir IDataReader nesnesi döndürür.</summary>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı. Açık değilse otomatik olarak açılır.</param>
            <param name="commandText">
              Çalıştırılacak SQL sorgusu.</param>
            <param name="param">
              Parameters (optional).</param>
            <returns>
              Sorgunun çalıştırılması sonucu elde edilen IDataReader nesnesi.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteReader(System.Data.IDbConnection,System.String)">
            <summary>
              Sorguyu belirtilen bağlantı üzerinde çalıştırır ve bir IDataReader nesnesi döndürür.</summary>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı. Açık değilse otomatik olarak açılır.</param>
            <param name="commandText">
              Çalıştırılacak SQL sorgusu.</param>
            <returns>
              Sorgunun çalıştırılması sonucu elde edilen IDataReader nesnesi.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.GetReaderCacheKey(System.String,System.String)">
            <summary>
              Belli bir bağlantı string'i ve sorgu metni için Cache içinde anahtar olarak kullanılabilecek
              bir string üretir.</summary>
            <remarks>
              Bu fonksiyon ExecuteReader(IDbConnection, string, TimeSpan, params) tarafından çalıştırılan
              sorguların uygulama Cache'i içerisinde önbelleklenmesi için gerekli olan anahtar string'in 
              üretilmesinde kullanılır.</remarks>
            <param name="connectionString">
              Sorgunun çalıştırılacağı bağlantı string'i</param>
            <param name="commandText">
              Sorgu metni, <c>null</c> olabilir.</param>
            <returns>
              Bağlantı string'i ve sorgu metnine göre unique bir anahtar.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteReader(System.Data.IDbConnection,Serenity.Data.SqlQuery)">
            <summary>
              <see cref="T:Serenity.Data.SqlQuery"/> nesnesinin içerdiği sorguyu bağlantı üzerinde çalıştırır.</summary>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı. Gerekirse otomatik olarak açılır.</param>
            <param name="query">
              Sorguyu içeren <see cref="T:Serenity.Data.SqlQuery"/> nesnesi.</param>
            <returns>
              Sorgu sonuçlarına erişim sağlayan <see cref="T:System.Data.IDataReader"/> nesnesi.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.ExecuteReader(System.Data.IDbConnection,Serenity.Data.SqlQuery,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
              <see cref="T:Serenity.Data.SqlQuery"/> nesnesinin içerdiği sorguyu bağlantı üzerinde çalıştırır.</summary>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı. Gerekirse otomatik olarak açılır.</param>
            <param name="query">
              Sorguyu içeren <see cref="T:Serenity.Data.SqlQuery"/> nesnesi.</param>
            <param name="param">Parameter dictionary</param>
            <returns>
              Sorgu sonuçlarına erişim sağlayan <see cref="T:System.Data.IDataReader"/> nesnesi.</returns>
        </member>
        <member name="M:Serenity.Data.SqlHelper.Exists(Serenity.Data.SqlQuery,System.Data.IDbConnection)">
            <summary>
              <see cref="T:Serenity.Data.SqlQuery"/> nesnesinin içerdiği sorguyu bağlantı üzerinde çalıştırır ve
              en azından 1 sonuç göndermesini kontrol eder.</summary>
            <remarks>
              <p>Bu bir extension metodu olduğundan direk <c>query.Exists(connection)</c> 
              şeklinde de çalıştırılabilir.</p>
            </remarks>
            <param name="connection">
              Sorgunun çalıştırılacağı bağlantı. Gerekirse otomatik olarak açılır.</param>
            <param name="query">
              Sorguyu içeren <see cref="T:Serenity.Data.SqlQuery"/> nesnesi.</param>
            <returns>
              Eğer en azından bir sonuç alındıysa <c>true</c></returns>
        </member>
        <member name="M:Serenity.Data.SqlSyntax.IndexParam(System.Int32)">
            <summary>
              Returns an indexed parameter name like @p123.</summary>
            <param name="param">
              Param index.</param>
            <returns>
              Param name.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``1(``0,System.Action{``0})">
            <summary>
            Allows to reference the call chain object itself without breaking a call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as parameter.</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``2(``0,``1,System.Action{``0,``1})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            an inline object without breaking a call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``3(``0,``1,``2,System.Action{``0,``1,``2})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            two inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``4(``0,``1,``2,``3,System.Action{``0,``1,``2,``3})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            three inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param> 
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``5(``0,``1,``2,``3,``4,System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            four inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <param name="param4">An object that will be passed to action as fifth parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``6(``0,``1,``2,``3,``4,``5,System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            five inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <param name="param4">An object that will be passed to action as fifth parameter</param>
            <param name="param5">An object that will be passed to action as sixth parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``7(``0,``1,``2,``3,``4,``5,``6,System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            six inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <param name="param4">An object that will be passed to action as fifth parameter</param>
            <param name="param5">An object that will be passed to action as sixth parameter</param>
            <param name="param6">An object that will be passed to action as seventh parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``8(``0,``1,``2,``3,``4,``5,``6,``7,System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            seven inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <param name="param4">An object that will be passed to action as fifth parameter</param>
            <param name="param5">An object that will be passed to action as sixth parameter</param>
            <param name="param6">An object that will be passed to action as seventh parameter</param>
            <param name="param7">An object that will be passed to action as eight parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``9(``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            seven inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <param name="param4">An object that will be passed to action as fifth parameter</param>
            <param name="param5">An object that will be passed to action as sixth parameter</param>
            <param name="param6">An object that will be passed to action as seventh parameter</param>
            <param name="param7">An object that will be passed to action as eight parameter</param>
            <param name="param8">An object that will be passed to action as ninth parameter</param>
            <returns>
            The query itself.</returns>
        </member>
        <member name="M:Serenity.MethodChainingExtensions.With``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Allows to reference the call chain object itself, while declaring
            seven inline objects without breaking call chain.
            </summary>
            <param name="chain">Chaining object</param>
            <param name="action">An action that will be called with the chain object as first parameter.</param>
            <param name="param1">An object that will be passed to action as second parameter</param>
            <param name="param2">An object that will be passed to action as third parameter</param>
            <param name="param3">An object that will be passed to action as fourth parameter</param>
            <param name="param4">An object that will be passed to action as fifth parameter</param>
            <param name="param5">An object that will be passed to action as sixth parameter</param>
            <param name="param6">An object that will be passed to action as seventh parameter</param>
            <param name="param7">An object that will be passed to action as eight parameter</param>
            <param name="param8">An object that will be passed to action as ninth parameter</param>
            <param name="param9">An object that will be passed to action as tenth parameter</param>
            <returns>
            The query itself.</returns>
        </member>
    </members>
</doc>
